{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/@github+clipboard-copy-element@1.3.0/node_modules/@github/clipboard-copy-element/dist/clipboard.js", "../../../../node_modules/.pnpm/@github+clipboard-copy-element@1.3.0/node_modules/@github/clipboard-copy-element/dist/clipboard-copy-element.js", "../../../../node_modules/.pnpm/@github+clipboard-copy-element@1.3.0/node_modules/@github/clipboard-copy-element/dist/clipboard-copy-element-define.js", "../../../../node_modules/.pnpm/@github+clipboard-copy-element@1.3.0/node_modules/@github/clipboard-copy-element/dist/index.js"],
  "sourcesContent": ["function createNode(text) {\n    const node = document.createElement('pre');\n    node.style.width = '1px';\n    node.style.height = '1px';\n    node.style.position = 'fixed';\n    node.style.top = '5px';\n    node.textContent = text;\n    return node;\n}\nexport function copyNode(node) {\n    if ('clipboard' in navigator) {\n        return navigator.clipboard.writeText(node.textContent || '');\n    }\n    const selection = getSelection();\n    if (selection == null) {\n        return Promise.reject(new Error());\n    }\n    selection.removeAllRanges();\n    const range = document.createRange();\n    range.selectNodeContents(node);\n    selection.addRange(range);\n    document.execCommand('copy');\n    selection.removeAllRanges();\n    return Promise.resolve();\n}\nexport function copyText(text) {\n    if ('clipboard' in navigator) {\n        return navigator.clipboard.writeText(text);\n    }\n    const body = document.body;\n    if (!body) {\n        return Promise.reject(new Error());\n    }\n    const node = createNode(text);\n    body.appendChild(node);\n    copyNode(node);\n    body.removeChild(node);\n    return Promise.resolve();\n}\n", "import { copyNode, copyText } from './clipboard.js';\nasync function copy(button) {\n    const id = button.getAttribute('for');\n    const text = button.getAttribute('value');\n    function trigger() {\n        button.dispatchEvent(new CustomEvent('clipboard-copy', { bubbles: true }));\n    }\n    if (button.getAttribute('aria-disabled') === 'true') {\n        return;\n    }\n    if (text) {\n        await copyText(text);\n        trigger();\n    }\n    else if (id) {\n        const root = 'getRootNode' in Element.prototype ? button.getRootNode() : button.ownerDocument;\n        if (!(root instanceof Document || ('ShadowRoot' in window && root instanceof ShadowRoot)))\n            return;\n        const node = root.getElementById(id);\n        if (node) {\n            await copyTarget(node);\n            trigger();\n        }\n    }\n}\nfunction copyTarget(content) {\n    if (content instanceof HTMLInputElement || content instanceof HTMLTextAreaElement) {\n        return copyText(content.value);\n    }\n    else if (content instanceof HTMLAnchorElement && content.hasAttribute('href')) {\n        return copyText(content.href);\n    }\n    else {\n        return copyNode(content);\n    }\n}\nfunction clicked(event) {\n    const button = event.currentTarget;\n    if (button instanceof HTMLElement) {\n        copy(button);\n    }\n}\nfunction keydown(event) {\n    if (event.key === ' ' || event.key === 'Enter') {\n        const button = event.currentTarget;\n        if (button instanceof HTMLElement) {\n            event.preventDefault();\n            copy(button);\n        }\n    }\n}\nfunction focused(event) {\n    ;\n    event.currentTarget.addEventListener('keydown', keydown);\n}\nfunction blurred(event) {\n    ;\n    event.currentTarget.removeEventListener('keydown', keydown);\n}\nexport class ClipboardCopyElement extends HTMLElement {\n    static define(tag = 'clipboard-copy', registry = customElements) {\n        registry.define(tag, this);\n        return this;\n    }\n    constructor() {\n        super();\n        this.addEventListener('click', clicked);\n        this.addEventListener('focus', focused);\n        this.addEventListener('blur', blurred);\n    }\n    connectedCallback() {\n        if (!this.hasAttribute('tabindex')) {\n            this.setAttribute('tabindex', '0');\n        }\n        if (!this.hasAttribute('role')) {\n            this.setAttribute('role', 'button');\n        }\n    }\n    get value() {\n        return this.getAttribute('value') || '';\n    }\n    set value(text) {\n        this.setAttribute('value', text);\n    }\n}\n", "import { ClipboardCopyElement } from './clipboard-copy-element.js';\nconst root = (typeof globalThis !== 'undefined' ? globalThis : window);\ntry {\n    root.ClipboardCopyElement = ClipboardCopyElement.define();\n}\ncatch (e) {\n    if (!(root.DOMException && e instanceof DOMException && e.name === 'NotSupportedError') &&\n        !(e instanceof ReferenceError)) {\n        throw e;\n    }\n}\nexport default ClipboardCopyElement;\nexport * from './clipboard-copy-element.js';\n", "import { ClipboardCopyElement } from './clipboard-copy-element.js';\nexport { ClipboardCopyElement };\nexport default ClipboardCopyElement;\nexport * from './clipboard-copy-element-define.js';\n"],
  "mappings": "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",
  "names": ["createNode", "text", "node", "copyNode", "selection", "range", "copyText", "body", "copy", "button", "id", "text", "trigger", "copyText", "root", "node", "copyTarget", "content", "copyNode", "clicked", "event", "keydown", "focused", "blurred", "ClipboardCopyElement", "tag", "registry", "root", "ClipboardCopyElement", "dist_default", "ClipboardCopyElement"]
}
