{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/light-pen@4.1.0/node_modules/light-pen/exports/components/light-pen/light-pen.styles.js", "../../../../node_modules/.pnpm/light-pen@4.1.0/node_modules/light-pen/exports/components/light-pen/light-pen.js", "../../../../node_modules/.pnpm/light-pen@4.1.0/node_modules/light-pen/exports/components/light-pen/light-pen-register.js"],
  "sourcesContent": ["import { css } from \"lit\";\nexport const styles = css`\n  [part~=\"sandbox-iframe\"] {\n    width: 100%;\n    height: 100%;\n    border: 1px solid darkgray;\n  }\n\n  [part~=\"sandbox-editor\"] {\n    padding: 4px;\n  }\n\n  [part~=\"sandbox-editor\"]::part(base):focus-within {\n    border-color: dodgerblue;\n  }\n\n  [part~=\"sandbox-editor\"]::part(base) {\n    resize: vertical;\n    border: 2px solid gray;\n    border-radius: 8px;\n  }\n\n  [part~=\"sandbox\"] {\n    color: #272727;\n    display: grid;\n    grid-template-columns: minmax(0, 1fr);\n    grid-template-rows: minmax(0, auto) minmax(0, 1fr);\n  }\n\n  [part~=\"summary\"] {\n    display: inline-block;\n    margin: 6px 0px;\n  }\n\n  [part~=\"disclosure\"]::part(summary) {\n    margin: 6px 0px;\n  }\n\n  [part~=\"base\"] {\n    word-wrap: break-word;\n    color: inherit;\n    font-size: 1em;\n  }\n\n  [part~=\"details\"] {\n    padding: 4px;\n  }\n\n  [part~=\"details\"]:not(:first-child) {\n  }\n\n  [part~=\"sandbox\"],\n  [part~=\"base\"] {\n    height: 100%;\n  }\n\n  [part~=\"sandbox-iframe\"] {\n    aspect-ratio: auto;\n    background-color: #fff;\n    margin-bottom: 0;\n  }\n\n  [part~=\"base\"],\n  [part~=\"pre\"],\n  [part~=\"code\"],\n  [part~=\"sandbox-iframe\"] {\n    border-radius: 0.25rem;\n  }\n\n  [part~=\"sandbox-header\"],\n  [part~=\"sandbox-console\"],\n  [part~=\"sandbox-console-result\"] {\n    background-color: #343d4d;\n    color: #fff;\n  }\n\n  [part~=\"sandbox-header\"] {\n    display: grid;\n    grid-auto-flow: column;\n    align-items: center;\n    justify-content: space-between;\n    font-size: 0.8125em;\n    border-top-right-radius: 0.25rem;\n    border-top-left-radius: 0.25rem;\n  }\n\n  [part~=\"sandbox-console\"],\n  [part~=\"sandbox-content\"] {\n    border-bottom-right-radius: 0.25rem;\n    border-bottom-left-radius: 0.25rem;\n    background-color: #e5e5e5;\n  }\n\n  [part~=\"sandbox-controls\"] button {\n    margin-bottom: 0;\n  }\n\n  [part~=\"sandbox-console-log\"] {\n    font-family: Menlo, Monaco, \"Courier New\", monospace;\n    font-size: 0.875em;\n    min-height: 1.2em;\n  }\n\n  .log-warn {\n    color: #f9d767;\n  }\n\n  .log-error {\n    color: #f9c8c8;\n  }\n\n  [part~=\"sandbox-header\"],\n  [part~=\"sandbox-code\"],\n  [part~=\"sandbox-iframe-wrapper\"],\n  [part~=\"sandbox-console\"],\n  [part~=\"sandbox-console-result\"] {\n    padding: 0.5em;\n  }\n\n  [part~=\"sandbox-code\"] {\n    max-height: 100%;\n    overflow-y: auto;\n  }\n\n  [part~=\"sandbox-code\"] > *:not(:first-child) {\n    margin-top: 6px;\n  }\n\n  button[part~=\"panel-resizer\"] {\n    height: calc(100% - 0.5em);\n    cursor: col-resize;\n    background-color: white;\n  }\n\n  button[part~=\"panel-resizer\"]:is(:active, :hover, .is-active) {\n    cursor: col-resize;\n  }\n\n  [resizing],\n  [part~=\"panel-resizer\"].is-active {\n    cursor: col-resize;\n  }\n\n  [part~=\"sandbox-content\"] {\n    display: grid;\n    grid-template-columns:\n      minmax(var(--start-panel-min-width, 30px), var(--start-panel-width, 1fr))\n      minmax(0, auto) minmax(var(--end-panel-min-width, 30px), var(--end-panel-width, 1fr));\n    grid-template-rows: minmax(0, 1fr);\n  }\n\n  [part~=\"sandbox-console-result\"] {\n    border-top: 1px solid #1f252f;\n    border-bottom-left-radius: 0;\n  }\n`;\n", "// @ts-check\n\nimport { html } from \"lit\";\nimport { styles } from \"./light-pen.styles.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\n\nimport { baseStyles, buttonStyles } from \"../../styles/base-styles.js\";\n\nimport { clamp } from \"../../../internal/clamp.js\";\nimport { drag } from \"../../../internal/drag.js\";\nimport { resizeIcon } from \"../../../internal/resize-icon.js\";\nimport { BaseElement } from \"../../../internal/base-element.js\";\nimport LightEditor from \"../light-editor/light-editor.js\";\nimport LightDisclosure from \"../light-disclosure/light-disclosure.js\";\n\n/**\n * @typedef {\"html\" | \"css\" | \"js\"} SupportedLanguages\n * @typedef {HTMLTextAreaElement | HTMLScriptElement | HTMLTemplateElement} SafeTemplateElements\n */\n\n/**\n * A lightweight codepen-like editor. `<light-pen>` is `~15kb` in size. Compared to `~90kb` from CodeMirror and `~160kb` from CodeSandbox. LightPen purposely is small and lightweight and is not intended to replace these tools. But rather\n fill a gap for users who don't need as much power.\n * @customElement\n * @tagname light-pen\n * @slot html - HTML to insert\n * @slot css - CSS to insert\n * @slot js - JavaScript to insert\n * @slot title - The title to appear at the top of the editor\n *\n * @part base - The base wrapper\n * @part sandbox - The wrapper around the editor and the iframe\n * @part sandbox-header - The wrapper around the header area\n */\nexport default class LightPen extends BaseElement {\n  // Static\n  /**\n   * @override\n   */\n  static baseName = \"light-pen\";\n\n  /**\n   * @override\n   */\n  static styles = [baseStyles, buttonStyles, styles];\n\n  /**\n   * @override\n   */\n  static dependencies = {\n    \"light-editor\": LightEditor,\n    \"light-disclosure\": LightDisclosure,\n  };\n\n  /**\n   * @override\n   */\n  static properties = {\n    openLanguages: { reflect: true, attribute: \"open-languages\" },\n    resizePosition: {\n      attribute: \"resize-position\",\n      reflect: true,\n      type: Number,\n    },\n    preserveWhitespace: {\n      attribute: \"preserve-whitespace\",\n      type: Boolean,\n      reflect: true,\n    },\n    console: { reflect: true },\n    sandboxSettings: { reflect: true, attribute: \"sandbox-settings\" },\n    languages: { attribute: false, type: Array },\n    cssCode: { attribute: false },\n    htmlCode: { attribute: false },\n    jsCode: { attribute: false },\n    // cssResetCode: { attribute: false },\n    // htmlResetCode: { attribute: false },\n    // jsResetCode: { attribute: false },\n    htmlResizeObserver: { attribute: false },\n    jsResizeObserver: { attribute: false },\n    cssResizeObserver: { attribute: false },\n    _resizing: { attribute: false },\n  };\n\n  // Overrides\n\n  /**\n   * @override\n   */\n  constructor() {\n    super();\n\n    /**\n     * @property\n     * @type {ResizeObserver}\n     */\n    this.resizeObserver = new ResizeObserver((entries) =>\n      this.handleResize(entries),\n    );\n\n    /**\n     * @attribute\n     * @reflect\n     * @type {number}\n     */\n    this.resizePosition = 50;\n\n    /**\n     * Languages to have open on initial render\n     * Comma separated list of elements to open on initial render \"html,css,js\" to open all.\n     * @attribute\n     * @reflect\n     * @type {string}\n     */\n    this.openLanguages = \"\";\n\n    /**\n     * @type {Array<SupportedLanguages>}\n     * @property\n     */\n    this.languages = [\"html\", \"css\", \"js\"];\n\n    /**\n     * Not implemented.\n     * @property\n     * @type {\"enabled\" | \"disabled\"}\n     */\n    this.console = \"disabled\";\n\n    /**\n     * Not implemented.\n     * @property\n     * @type {string}\n     */\n    this.consoleText = \"\";\n\n    /**\n     * @property\n     * @internal\n     * @type {number}\n     */\n    this.cachedWidth = 0;\n\n    /**\n     * @property\n     * @type {string}\n     */\n    this.sandboxSettings = \"\";\n\n    /**\n     * @internal\n     */\n    this._resizing = false;\n\n    this.cssCode = \"\";\n    this.htmlCode = \"\";\n    this.jsCode = \"\";\n\n    /**\n     * Passed down to the editors.\n     * @type {boolean}\n     */\n    this.preserveWhitespace = false;\n    // this.cssResetCode = \"\"\n    // this.htmlResetCode = \"\"\n    // this.jsResetCode = \"\"\n  }\n\n  /**\n   * @type {undefined | null | LightEditor}\n   */\n  get jsEditor() {\n    return this.shadowRoot?.querySelector(\"#editor-js\");\n  }\n\n  /**\n   * @type {undefined | null | LightEditor}\n   */\n  get cssEditor() {\n    return this.shadowRoot?.querySelector(\"#editor-css\");\n  }\n\n  /**\n   * @type {undefined | null | LightEditor}\n   */\n  get htmlEditor() {\n    return this.shadowRoot?.querySelector(\"#editor-html\");\n  }\n\n  /**\n   * @override\n   */\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.updateCachedWidth();\n\n    this.updateComplete.then(() => {\n      this.resizeObserver.observe(this);\n    });\n  }\n\n  /**\n   * Sets an initial width so we dont need to keep computing getBoundingClientRect\n   */\n  updateCachedWidth() {\n    const { left, right } = this.getBoundingClientRect();\n    const width = left + right;\n    this.cachedWidth = width;\n  }\n\n  /**\n   * @param {ResizeObserverEntry[]} entries\n   */\n  handleResize(entries) {\n    const { left, right } = entries[0].contentRect;\n\n    const width = left + right;\n    // Resize when a primary panel is set\n    this.cachedWidth = width;\n  }\n\n  /** Getters / Setters */\n\n  /**\n   * @returns {null | undefined | HTMLIFrameElement}\n   */\n  get iframeElem() {\n    return this.shadowRoot?.querySelector(\"iframe\");\n  }\n\n  updateIframeContent() {\n    const iframeElem = this.iframeElem;\n    if (iframeElem == null) return;\n\n    // this.setupIframeLogging();\n\n    let page = `\n      <!doctype html><html>\n        <head><meta charset=\"utf-8\">\n          <style>${this.cssCode}<\\/style>\n        </head>\n        <body>\n          ${this.htmlCode}\n          <script type=\"module\">\n            ${this.jsCode}\n          </script>\n        </body>\n      </html>\n    `;\n\n    iframeElem.srcdoc = page;\n  }\n\n  /**\n   * @override\n   * @param {import(\"lit\").PropertyValues} changedProperties\n   */\n  willUpdate(changedProperties) {\n    if (\n      [\"cssCode\", \"htmlCode\", \"jsCode\"].some((str) =>\n        changedProperties.has(str),\n      )\n    ) {\n      if (this._iframeDebounce != null)\n        window.clearTimeout(this._iframeDebounce);\n      this._iframeDebounce = setTimeout(() => this.updateIframeContent(), 300);\n    }\n\n    if (changedProperties.has(\"resizePosition\")) {\n      this.updateResizePosition();\n    }\n\n    super.willUpdate(changedProperties);\n  }\n\n  /**\n   * @override\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.resizeObserver.disconnect();\n  }\n\n  /**\n   * @param {KeyboardEvent} event\n   */\n  handleResizerKeydown(event) {\n    if (\n      [\n        \"ArrowLeft\",\n        \"ArrowRight\",\n        \"ArrowUp\",\n        \"ArrowDown\",\n        \"Home\",\n        \"End\",\n      ].includes(event.key)\n    ) {\n      let newPosition = this.resizePosition;\n      const incr = (event.shiftKey ? 10 : 1) * 1;\n\n      event.preventDefault();\n\n      if (event.key === \"ArrowLeft\") {\n        newPosition -= incr;\n      }\n\n      if (event.key === \"ArrowRight\") {\n        newPosition += incr;\n      }\n\n      if (event.key === \"Home\") {\n        newPosition = 100;\n      }\n\n      if (event.key === \"End\") {\n        newPosition = 0;\n      }\n\n      this.resizePosition = clamp(newPosition, 0, 100);\n    }\n  }\n\n  updateResizePosition(resizePosition = this.resizePosition) {\n    const startWidth = resizePosition;\n\n    if (startWidth != null) {\n      const endWidth = 100 - startWidth;\n      this.style.setProperty(\"--start-panel-width\", `${startWidth}%`);\n      this.style.setProperty(\"--end-panel-width\", `${endWidth}%`);\n    }\n  }\n\n  resetValues() {\n    this.htmlCode = this.htmlEditor?.getAttribute(\"value\") || \"\";\n    this.cssCode = this.cssEditor?.getAttribute(\"value\") || \"\";\n    this.jsCode = this.jsEditor?.getAttribute(\"value\") || \"\";\n\n    this.requestUpdate();\n  }\n\n  // setupIframeLogging() {\n  //   if (!this.console && this.result !== 'console') return;\n  //\n  //   if (this.iframeElem == null) return\n  //   if (this.iframeElem.contentWindow == null) return\n  //\n  //   this.iframeElem.contentWindow.document.open(),\n  //   this.iframeElem.contentWindow.document.writeln(\n  //     '<script>\\n\\t\\t\\t\\tlet __console = Object.assign({}, console);\\n\\t\\t\\t\\tlet __listener = function () {};\\n\\t\\t\\t\\tfor (let type in console) {\\n\\t\\t\\t\\t\\tconsole[type] = function (...msg) {\\n\\t\\t\\t\\t\\t\\t__listener({source: \\'iframe\\', msg, type}, \\'*\\');\\n\\t\\t\\t\\t\\t\\t__console[type](...msg);\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tconsole.listen = function (callback) {\\n\\t\\t\\t\\t\\t__listener = callback;\\n\\t\\t\\t\\t};\\n\\t\\t\\t</script>'\n  //   ),\n  //   this.iframeElem.contentWindow.document.close();\n  //   let e = this;\n  //\n  //\n  //   // @ts-expect-error\n  //   this.iframeElem.contentWindow.console.listen(\n  //     function (t) {\n  //       for (let n of t.msg) {\n  //         let a = document.createElement('div');\n  //         a.className = `log-${ t.type }`,\n  //         a.textContent = this.getConsoleMessage(),\n  //         e.loggerElem?.append(a)\n  //       }\n  //     }\n  //   )\n  // }\n\n  // Rendering\n  renderConsole() {\n    return html`<div part=\"sandbox-console-log\"></div>`;\n  }\n\n  /**\n   * @override\n   */\n  render() {\n    return html` <!-- Where users can declaratively provide templates -->\n      <div part=\"base\" ?resizing=${this._resizing}>\n        <div part=\"sandbox\">\n          <div part=\"sandbox-header\">\n            <slot name=\"title\">\n              <strong> Code Editor </strong>\n            </slot>\n\n            <span part=\"sandbox-controls\">\n              <button\n                class=\"light-button\"\n                part=\"sandbox-controls-button sandbox-reset\"\n                @click=${this.resetValues}\n              >\n                Reset\n              </button>\n\n              ${when(\n                this.console === \"enabled\",\n                () => html`<button @click=\"{}\">Clear Console</button>`,\n              )}\n            </span>\n          </div>\n          <div part=\"sandbox-content\">\n            <div part=\"sandbox-code\">\n              ${this.renderDetails(\"html\")} ${this.renderDetails(\"css\")}\n              ${this.renderDetails(\"js\")}\n            </div>\n\n            <button\n              id=\"panel-resizer\"\n              part=\"panel-resizer\"\n              role=\"separator\"\n              aria-valuenow=${this.resizePosition}\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n              @keydown=${this.handleResizerKeydown}\n              @pointerdown=${this.handleDrag}\n              @touchstart=${this.handleDrag}\n              class=${`light-button ${this._resizing ? `is-active` : \"\"}`}\n            >\n              <slot name=\"panel-resize-icon\"> ${resizeIcon} </slot>\n              <span class=\"visually-hidden\"\n                >Resize Panel. Pull to left or right to resize.</span\n              >\n            </button>\n\n            <div part=\"sandbox-iframe-wrapper\">\n              <iframe\n                part=\"sandbox-iframe\"\n                frameborder=\"0\"\n                sandbox=${ifDefined(\n                  this.sandboxSettings ? this.sandboxSettings : null,\n                )}\n              ></iframe>\n            </div>\n          </div>\n\n          <!--\n        ${when(\n            this.console === \"enabled\",\n            () => html`\n              <details class=\"sandbox-console\" ?open=${console}>\n                <summary part=\"summary summary-console\" tabindex=\"0\">\n                  Console\n                </summary>\n                ${this.consoleText}\n              </details>\n            `,\n          )}\n        -->\n        </div>\n      </div>`;\n  }\n\n  /**\n   * @param {PointerEvent} event\n   */\n  handleDrag(event) {\n    // Prevent text selection when dragging\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    if (this.iframeElem) {\n      // We need to disable pointerevents on the iframe to listen for mousemove over the top of it.\n      this.iframeElem.style.pointerEvents = \"none\";\n    }\n\n    this._resizing = true;\n\n    drag(this, {\n      onMove: (x, _y) => {\n        this._resizing = true;\n        let newPositionInPixels = x;\n\n        this.resizePosition = clamp(\n          0,\n          this.pixelsToPercentage(newPositionInPixels),\n          100,\n        );\n        this.updateResizePosition();\n      },\n      onStop: () => {\n        if (this.iframeElem) {\n          // Re-enable pointerevents so you can use tab keys etc.\n          this.iframeElem.style.pointerEvents = \"auto\";\n        }\n\n        this._resizing = false;\n      },\n      initialEvent: event,\n    });\n  }\n\n  /**\n   * @internal\n   * @param {number} pixels\n   * @return {number}\n   */\n  pixelsToPercentage(pixels) {\n    return (pixels / this.cachedWidth) * 100;\n  }\n\n  /**\n   * @internal\n   * @param {SupportedLanguages} language\n   */\n  renderEditor(language) {\n    return html`\n      <light-editor\n        id=${`editor-${language}`}\n        part=${`sandbox-editor sandbox-editor--${language}`}\n        exportparts=\"\n          base:sandbox-editor__base,\n          pre:sandbox-editor__pre,\n          code:sandbox-editor__code,\n          textarea:sandbox-editor__textarea\n        \"\n        language=${language}\n        .value=${this[`${language}Code`]}\n        ?preserve-whitespace=${this.preserveWhitespace}\n        @light-value-change=${(/** @type Event */ e) => {\n          this[`${language}Code`] = /** @type {LightEditor} */ (\n            e.currentTarget\n          ).value;\n        }}\n        ><slot name=${language}></slot\n      ></light-editor>\n    `;\n  }\n\n  /**\n   * @internal\n   * @param {SupportedLanguages} language\n   */\n  renderDetails(language) {\n    let fullLanguage = language.toUpperCase();\n\n    // const open = this.openLanguages.split(\",\").includes(language)\n\n    return html`\n      <light-disclosure part=\"disclosure disclosure-${language}\">\n        <span part=\"summary\" slot=\"summary\"\n          ><slot name=${`summary-${language}`}>${fullLanguage}</slot></span\n        >\n\n        ${this.renderEditor(language)}\n      </light-disclosure>\n    `;\n  }\n}\n", "import LightPen from \"./light-pen.js\";\n\nexport default LightPen;\n\nLightPen.define();\n"],
  "mappings": "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",
  "names": ["styles", "i", "LightPen", "BaseElement", "entries", "left", "right", "width", "iframeElem", "page", "changedProperties", "str", "event", "newPosition", "incr", "clamp", "resizePosition", "startWidth", "endWidth", "ke", "nn", "resizeIcon", "to", "drag", "x", "_y", "newPositionInPixels", "pixels", "language", "e", "fullLanguage", "__publicField", "baseStyles", "buttonStyles", "styles", "LightEditor", "LightDisclosure", "light_pen_register_default", "LightPen"]
}
