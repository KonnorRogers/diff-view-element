[
        {
          "id": "diff-view-element-pull-4-components-basic-diff-view-element",
          "title": "<basic-diff-view-element>",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "components",
          "tags": "",
          "url": "/diff-view-element/pull/4/components/basic-diff-view-element/",
          "content": "Examples\n\n\n\n  \n\n\nA large example\n\n\n  \n\n\nDisabling line numbers\n\nLine numbers can be disabled by adding the disable-line-numbers attribute.\n\n\n  \n\n\nChanging the starting line number\n\nThe starting line number can be changed by using the line-number-start attribute.\n\n\n\n  \n\n\nSlotting in content\n\nContent can be slotted in using &lt;script type=\"text/plain\"&gt; tags. Do note, it will only escape &amp;lt;/script&gt; and turn it in to &lt;/script&gt;. It will not escape any HTML for you.\n\nAs for why a &lt;script type=\"text/plain\"&gt; is preferred, check out the docs on “Why Script Tags”\n\nSlotted content will have extra leading / trailing whitespace stripped, will be “dedented” for you.\n\n\n  \n\n\nPreserving whitespace\n\nWhitespace can be preserved by using preserve-whitespace which will also preserve leading / trailing new lines as well as disable “dedenting” of the strings.\n\n\n  \n\n\nFuture ideas\n\n\n  - “Unified view” where diffs are rendered inline instead of 2 different views\n  - Render functions for additional things like buttons\n  - Code folding\n  - File names\n  - Displaying number of diffs in a file\n  - Expose more types of diffs (words / sentences / json / css, etc)\n\n\nGot an idea? I’d love to hear it!\n\nhttps://github.com/KonnorRogers/diff-view-element/issues\n\nAPI Reference\n\nImports\n\n\nScript\n\n  &lt;!-- Auto registers as &lt;basic-diff-view-element&gt; --&gt;\n&lt;script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/diff-view-element/cdn/exports/components/basic-diff-view-element/basic-diff-view-element-register.js\"&gt;&lt;/script&gt;\n\n\n\nCDN\n\n  &lt;script type=\"module\"&gt;\n  // Auto registers as &lt;basic-diff-view-element&gt;\n  import \"https://cdn.jsdelivr.net/npm/diff-view-element/cdn/exports/components/basic-diff-view-element/basic-diff-view-element-register.js\"\n\n  // Manual Register\n  import BasicDiffViewElement from \"https://cdn.jsdelivr.net/npm/diff-view-element/cdn/exports/components/basic-diff-view-element/basic-diff-view-element.js\"\n  BasicDiffViewElement.define()\n  // =&gt; Registers as &lt;basic-diff-view-element&gt;\n&lt;/script&gt;\n\n\n\nBundler\n\n  // Auto registers as &lt;basic-diff-view-element&gt;\nimport \"diff-view-element/exports/components/basic-diff-view-element/basic-diff-view-element-register.js\"\n\n// Manual Register\nimport BasicDiffViewElement \"diff-view-element/exports/components/basic-diff-view-element/basic-diff-view-element.js\"\nBasicDiffViewElement.define()\n// =&gt; Registers as &lt;basic-diff-view-element&gt;\n\n\n\n\n\nFunctions\n\n\n  \n    \n      \n        Name\n        Description\n        Parameters\n      \n    \n    \n      \n  \n    handleTablePointerUp()\n  \n  \n    Remove the “active-side” from the table element\n  \n  \n    e: PointerEvent\n  \n\n\n\n  \n    handleTablePointerDown()\n  \n  \n    Handles “pointerdown” events on the table. This is used for determined what side is “active” so that you could only ever “select” one side of the diff.\n  \n  \n    e: PointerEvent\n  \n\n\n\n  \n    handleSlottedValues()\n  \n  \n    Turns slotted elements into strings to be consumed by oldValue / newValue.\n  \n  \n    e: Event\n  \n\n\n\n  \n    renderDiff()\n  \n  \n    The base entrypoint for rendering diffs. The return value of this will be inside of a &lt;tbody&gt;\n  \n  \n    data: ReturnType&lt;typeof computeLineInformation&gt;\n  \n\n\n\n  \n    renderLine()\n  \n  \n    Renders a line on 1 side of the diff in split view.\n  \n  \n    diffInfo: DiffInformation\n  \n\n\n\n  \n    renderValue()\n  \n  \n    Renders a value given a DiffInformation object\n  \n  \n    obj: DiffInformation\n  \n\n\n\n  \n    toCharacterData()\n  \n  \n    A helper for finding data for a particular diff. This is useful for passing data further down especially for character diffs.\n  \n  \n    diffInfo: DiffInformation, diffInfoLine: DiffInformation, index: number\n  \n\n\n\n  \n    transformLineInformation()\n  \n  \n    In charge of altering the diffs per-line information. This will get called just before rendering all of the &lt;tr&gt;s inside of renderDiff.\n  \n  \n    lineInformation: LineInformation[]\n  \n\n\n\n  \n    getTextDirection()\n  \n  \n    Gets directionality of the element\n  \n  \n    -"
        },
        {
          "id": "diff-view-element-pull-4-components-diff-view-element",
          "title": "<diff-view-element>",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "components",
          "tags": "",
          "url": "/diff-view-element/pull/4/components/diff-view-element/",
          "content": "Examples\n\n\n\n  \n\n\nA large example\n\n\n  \n\n\nDisabling line numbers\n\nLine numbers can be disabled by adding the disable-line-numbers attribute.\n\n\n  \n\n\nChanging the starting line number\n\nThe starting line number can be changed by using the line-number-start attribute.\n\n\n\n  \n\n\nSlotting in content\n\nContent can be slotted in using &lt;script type=\"text/plain\"&gt; tags. Do note, it will only escape &amp;lt;/script&gt; and turn it in to &lt;/script&gt;. It will not escape any HTML for you.\n\nAs for why a &lt;script type=\"text/plain\"&gt; is preferred, check out the docs on “Why Script Tags”\n\nSlotted content will have extra leading / trailing whitespace stripped, will be “dedented” for you.\n\n\n  \n\n\nPreserving whitespace\n\nWhitespace can be preserved by using preserve-whitespace which will also preserve leading / trailing new lines as well as disable “dedenting” of the strings.\n\n\n  \n\n\nFuture ideas\n\n\n  - “Unified view” where diffs are rendered inline instead of 2 different views\n  - Render functions for additional things like buttons\n  - Code folding\n  - File names\n  - Displaying number of diffs in a file\n  - Expose more types of diffs (words / sentences / json / css, etc)\n\n\nGot an idea? I’d love to hear it!\n\nhttps://github.com/KonnorRogers/diff-view-element/issues\n\nAPI Reference\n\nImports\n\n\nScript\n\n  &lt;!-- Auto registers as &lt;diff-view-element&gt; --&gt;\n&lt;script type=\"module\" src=\"https://cdn.jsdelivr.net/npm/diff-view-element/cdn/exports/components/diff-view-element/diff-view-element-register.js\"&gt;&lt;/script&gt;\n\n\n\nCDN\n\n  &lt;script type=\"module\"&gt;\n  // Auto registers as &lt;diff-view-element&gt;\n  import \"https://cdn.jsdelivr.net/npm/diff-view-element/cdn/exports/components/diff-view-element/diff-view-element-register.js\"\n\n  // Manual Register\n  import DiffViewElement from \"https://cdn.jsdelivr.net/npm/diff-view-element/cdn/exports/components/diff-view-element/diff-view-element.js\"\n  DiffViewElement.define()\n  // =&gt; Registers as &lt;diff-view-element&gt;\n&lt;/script&gt;\n\n\n\nBundler\n\n  // Auto registers as &lt;diff-view-element&gt;\nimport \"diff-view-element/exports/components/diff-view-element/diff-view-element-register.js\"\n\n// Manual Register\nimport DiffViewElement \"diff-view-element/exports/components/diff-view-element/diff-view-element.js\"\nDiffViewElement.define()\n// =&gt; Registers as &lt;diff-view-element&gt;\n\n\n\n\n\nFunctions\n\n\n  \n    \n      \n        Name\n        Description\n        Parameters\n      \n    \n    \n      \n  \n    transformLineInformation()\n  \n  \n    Transform line info via side effects.\n  \n  \n    lineInfo\n  \n\n\n\n  \n    renderLine()\n  \n  \n    Renders a line on 1 side of the diff in split view.\n  \n  \n    diffInfo: DiffInformation\n  \n\n\n\n  \n    lineNumberPlugin()\n  \n  \n    A plugin for Prism to add line numbers.\n  \n  \n    lineInfo: LineInformation[], side: &quot;right&quot; | &quot;left&quot;\n  \n\n\n\n  \n    diffPartPlugin()\n  \n  \n    a “wrap” plugin for Prism to add parts to every token. Useful for external styling.\nIE: &lt;span class=\"token tag\"&gt; becomes &lt;span class=\"token tag\" part=\"token tag\"&gt;\n  \n  \n    env: any\n  \n\n\n\n  \n    syntaxHighlight()\n  \n  \n    The meat and potatos of the PrismJS highlighter. It runs the tokenizer and adds the per-character diffs as well as applicable highlights.\n  \n  \n    lineInfo: LineInformation[]\n  \n\n\n\n  \n    modifyTokens()\n  \n  \n    Modify tokens from Prism.\n  \n  \n    token: Token, data_array: LineDiffData[]\n  \n\n\n\n  \n    modifyToken()\n  \n  \n    Modifies a “TokenStreamItem” from Prism. T\n  \n  \n    token: TokenStreamItem, data: LineDiffData, currentData: { offset: number, count: number, value: string, offsetValue: string }\n  \n\n\n\n  \n    modifyTokenContent()\n  \n  \n    -\n  \n  \n    token: TokenStreamItem &amp; { touched: boolean; touchedIndexes: Set&lt;number&gt; }, index: null | number, data: LineDiffData, currentData: *\n  \n\n\n\n  \n    handleTablePointerUp()\n  \n  \n    Remove the “active-side” from the table element\n  \n  \n    e: PointerEvent\n  \n\n\n\n  \n    handleTablePointerDown()\n  \n  \n    Handles “pointerdown” events on the table. This is used for determined what side is “active” so that you could only ever “select” one side of the diff.\n  \n  \n    e: PointerEvent\n  \n\n\n\n  \n    handleSlottedValues()\n  \n  \n    Turns slotted elements into strings to be consumed by oldValue / newValue.\n  \n  \n    e: Event\n  \n\n\n\n  \n    renderDiff()\n  \n  \n    The base entrypoint for rendering diffs. The return value of this will be inside of a &lt;tbody&gt;\n  \n  \n    data: ReturnType&lt;typeof computeLineInformation&gt;\n  \n\n\n\n  \n    renderValue()\n  \n  \n    Renders a value given a DiffInformation object\n  \n  \n    obj: DiffInformation\n  \n\n\n\n  \n    toCharacterData()\n  \n  \n    A helper for finding data for a particular diff. This is useful for passing data further down especially for character diffs.\n  \n  \n    diffInfo: DiffInformation, diffInfoLine: DiffInformation, index: number\n  \n\n\n\n  \n    getTextDirection()\n  \n  \n    Gets directionality of the element\n  \n  \n    -"
        },
        {
          "id": "diff-view-element-pull-4-components",
          "title": "Components",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "components",
          "tags": "",
          "url": "/diff-view-element/pull/4/components/",
          "content": ""
        },
        {
          "id": "diff-view-element-pull-4-guides-getting-started",
          "title": "Getting Started",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "guides",
          "tags": "",
          "url": "/diff-view-element/pull/4/guides/getting-started/",
          "content": "NPM Installation\n\nnpm install diff-view-element\n\n\nNPM Usage\n\n// entrypoint.js\nimport \"diff-view-element\"; // Will register `&lt;basic-diff-view-element&gt;` and `&lt;diff-view-element&gt;` for you\n\n\nCDN usage\n\n&lt;script type=\"module\"&gt;\n  import \"https://cdn.jsdelivr.net/npm/diff-view-element\";\n\n  // Loading a version range. This will load the latest &gt;= 1.0.0 and &lt; 2.0.0 of diff-view-element.\n  import \"https://cdn.jsdelivr.net/npm/diff-view-element@^1.0.0\";\n\n  // Loading a specific version. This will only load v1.0.0\n  import \"https://cdn.jsdelivr.net/npm/diff-view-element@1.0.0\";\n&lt;/script&gt;\n\n\nA basic example\n\nWith the imports in place, you can now use the custom element and get to diffing!\n\n&lt;diff-view-element old-value=\"abcd\" new-value=\"abce\"&gt;&lt;/diff-view-element&gt;\n\n\n\n  \n\n\n\n\nCherry picking\n\nFor the bundle size conscious, or those looking to extend, diff-view-element has exports available for element definitions that both do not register, and will auto register.\n\nFor more, check out the “Imports” section of &lt;diff-view-element&gt; and &lt;basic-diff-view-element&gt;"
        },
        {
          "id": "diff-view-element-pull-4-guides-adding-languages-for-highlighting",
          "title": "Adding languages for highlighting",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "guides",
          "tags": "",
          "url": "/diff-view-element/pull/4/guides/adding-languages-for-highlighting/",
          "content": "Supported languages\n\nOut of the box &lt;diff-view-element&gt; supports the following languages via a PrismJS fork.\n\n\n  plaintext (default)\n  markup (mathml, svg, xml, ssml, atom, rss)\n  markdown, md\n  html\n  css\n  javascript, js, jsx\n  typescript, ts, tsx\n\n\nAdding additional languages\n\ndiffViewElement.highlighter is a property holds an instance of a fork of PrismJS called PrismJS ESM\n\nThe reason a fork is used is because PrismJS expects a singleton. This doesn’t work well if you have multiple components on a page and may need different plugins or hooks or other various things per-component. The fork is an attempt to make it ESM compatible and allow multiple instances to exist.\n\nMoving on, to add a language, we can query for our &lt;diff-view-element&gt; component, modify the highlighter, and reassign it.\n\nLet’s for example create a &lt;diff-view-element&gt; component and add the ruby loader.\n\nExample with Ruby code\n\n\n  \n\n\nCaveats\n\nBe aware that only “loaders” added to your PrismJS instance can perform syntax highlighting on code blocks.\n\nFor example, the default Prism instance only comes loaded with the following languages / grammars:\n\n\n  markup\n  markup-templating\n  css\n  css-extras\n  javascript\n  js-extras\n  js-templates\n  jsx\n  typescript\n  tsx\n\n\nA full list of all possible languages and grammars can be found here:\n\nhttps://github.com/KonnorRogers/prism-esm/tree/master/components\n\nThe general syntax is as follows:\n\n// Import the loader\nimport { loader as RubyLoader } from \"https://cdn.jsdelivr.net/npm/prism-esm/components/prism-ruby.js\")\n\n// Find the `&lt;diff-view-element&gt;` element\nconst diffViewElement = document.querySelector(\"diff-view-element\")\n\n// Get the Prism highlighter instance\nconst highlighter = diffViewElement.highlighter\n\n// Add the ruby \"grammar\"\nRubyLoader(highlighter)\n\n// Force an update\ndiffViewElement.requestUpdate()"
        },
        {
          "id": "diff-view-element-pull-4-guides",
          "title": "Guides",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "guides",
          "tags": "",
          "url": "/diff-view-element/pull/4/guides/",
          "content": ""
        },
        {
          "id": "diff-view-element-pull-4-references-why-script-tags",
          "title": "Why script tags",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "references",
          "tags": "",
          "url": "/diff-view-element/pull/4/references/why-script-tags/",
          "content": "You’ll notice in examples for &lt;diff-view-element&gt;, elements that are slotted use &lt;script type=\"text/plain\"&gt; tags and not &lt;template&gt; tags.\n\nThe &lt;template&gt; tag is not suitable for syntax highlighting because it applies formatting and is subject to the HTML parser. It is meant purely for HTML intended to be rendered. As a result, it will do things like strip / format text. As a result, &lt;script type=\"text/plain\"&gt; is the best way to get a “plaintext” representation of your code to be highlighted.\n\nTLDR: Use &lt;template&gt; for displaying HTML. Use &lt;script type=\"text/plain\"&gt; for non-html languages, or for escape sequences like &lt;!DOCTYPE html&gt; which will get stripped by &lt;template&gt; as well as invalid HTML. Overall, &lt;script type=\"text/plain\"&gt; results in code that doesn’t get lost.\n\nUnescaping tags\n\nBecause we use the workaround of slotting elements like this, there is the edge case of if you need a &lt;script&gt; within a &lt;script&gt;.\n\nLike so:\n\n&lt;light-preview preview-mode=\"shadow-dom\"&gt;\n  &lt;script type=\"text/plain\" slot=\"code\"&gt;\n    &lt;script&gt;\n      console.log(\"Hello World\")\n    &lt;/script&gt;\n  &lt;/script&gt;\n&lt;/light-preview&gt;\n\n\nTo workaround this, &lt;diff-view-element&gt; components have a convention of automatically unescaping tags that look like this:\n\n&amp;lt;/script&gt; and turns them into proper closing tags. &lt;/script&gt;\n\nSo if we were to rewrite the example above, we would write it like this:\n\n&lt;light-preview preview-mode=\"shadow-dom\"&gt;\n  &lt;script type=\"text/plain\" slot=\"code\"&gt;\n    &lt;script&gt;\n      console.log(\"Hello World\")\n    &amp;lt;/script&gt;\n  &lt;/script&gt;\n&lt;/light-preview&gt;"
        },
        {
          "id": "diff-view-element-pull-4-references-theming",
          "title": "Theming",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "references",
          "tags": "",
          "url": "/diff-view-element/pull/4/references/theming/",
          "content": "Coming Soon…"
        },
        {
          "id": "diff-view-element-pull-4-references",
          "title": "References",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "references",
          "tags": "",
          "url": "/diff-view-element/pull/4/references/",
          "content": "Coming Soon…"
        },
        {
          "id": "diff-view-element-pull-4-references-changelog",
          "title": "Changelog",
          "collection": {
            "label": "documentation",
            "name": "Posts"
          },
          "categories": "references",
          "tags": "",
          "url": "/diff-view-element/pull/4/references/changelog/",
          "content": "v1.0.2 08/18/2024\n\nBug Fix: Add the proper files to the files key in package.json #3\n\nv1.0.1 08/18/2024\n\nBug Fix(&lt;basic-diff-view-element&gt;): Fix a whitespace issue caused by Prettier auto formatting. #2"
        },
        {
          "id": "diff-view-element-pull-4",
          "title": "<diff-view-element>",
          "collection": {
            "label": "pages",
            "name": "Posts"
          },
          "categories": "",
          "tags": "",
          "url": "/diff-view-element/pull/4/",
          "content": ""
        },
        {
          "id": "diff-view-element-pull-4-vendor.json",
          "title": "Vendor",
          "collection": {
            "label": "pages",
            "name": "Posts"
          },
          "categories": "",
          "tags": "",
          "url": "/diff-view-element/pull/4/vendor.json",
          "content": "{\"package.json\":\"{\\n  \\\"name\\\": \\\"diff-view-element\\\",\\n  \\\"version\\\": \\\"1.0.2\\\",\\n  \\\"description\\\": \\\"A web component for displaying diffs in the browser\\\",\\n  \\\"main\\\": \\\"./exports/index.js\\\",\\n  \\\"module\\\": \\\"./exports/index.js\\\",\\n  \\\"types\\\": \\\"./exports/index.d.ts\\\",\\n  \\\"jsdelivr\\\": \\\"./bundles/all.js\\\",\\n  \\\"exports\\\": {\\n    \\\".\\\": \\\"./exports/index.js\\\",\\n    \\\"./package.json\\\": \\\"./package.json\\\",\\n    \\\"./exports/*.js\\\": \\\"./exports/*.js\\\",\\n    \\\"./exports/*\\\": \\\"./exports/*\\\",\\n    \\\"./types/*\\\": \\\"./types/*.d.ts\\\",\\n    \\\"./cdn/exports/*.js\\\": \\\"./cdn/exports/*.js\\\",\\n    \\\"./cdn/exports/*\\\": \\\"./cdn/exports/*\\\",\\n    \\\"./bundles/*.js\\\": \\\"./bundles/*.js\\\",\\n    \\\"./bundles/*\\\": \\\"./bundles/*\\\"\\n  },\\n  \\\"type\\\": \\\"module\\\",\\n  \\\"files\\\": [\\n    \\\"bundles\\\",\\n    \\\"cdn\\\",\\n    \\\"exports\\\",\\n    \\\"internal\\\",\\n    \\\"types\\\",\\n    \\\"README.md\\\",\\n    \\\"LICENSE\\\"\\n  ],\\n  \\\"scripts\\\": {\\n    \\\"start:docs\\\": \\\"cd docs && bin/bridgetown start\\\",\\n    \\\"setup\\\": \\\"pnpm install && cd docs && pnpm install && bundle install\\\",\\n    \\\"build:api\\\": \\\"typedoc --out ./docs/output/references/api/ ./exports/**/*.js\\\",\\n    \\\"build:api-json\\\": \\\"typedoc --json ./typedoc-generation.json ./exports/**/*.js\\\",\\n    \\\"build:cdn\\\": \\\"node esbuild.config.js\\\",\\n    \\\"build:cem\\\": \\\"custom-elements-manifest analyze\\\",\\n    \\\"build:docs\\\": \\\"pnpm run build && cd docs && pnpm run build\\\",\\n    \\\"build\\\": \\\"npm run clean && tsc && npm run build:cem &&  npm run build:cdn\\\",\\n    \\\"clean\\\": \\\"rimraf -g \\\\\\\"./{exports,internal}/**/*.d.ts\\\\\\\" -g \\\\\\\"./cdn\\\\\\\"\\\",\\n    \\\"create:component\\\": \\\"plop --plopfile scripts/plop/plopfile.js\\\",\\n    \\\"watch:cem\\\": \\\"custom-elements-manifest analyze --watch\\\",\\n    \\\"analyze\\\": \\\"custom-elements-manifest analyze --litelement\\\",\\n    \\\"update-version\\\": \\\"node scripts/update-version.js\\\",\\n    \\\"version\\\": \\\"npm run update-version && npm run build && git add internal/version.js\\\",\\n    \\\"prepublish\\\": \\\"npm run update-version && npm run build\\\",\\n    \\\"deploy:patch\\\": \\\"npm version patch && npm publish && git push --follow-tags\\\",\\n    \\\"deploy:minor\\\": \\\"npm version minor && npm publish && git push --follow-tags\\\",\\n    \\\"deploy:major\\\": \\\"npm version major && npm publish && git push --follow-tags\\\",\\n    \\\"publish:beta\\\": \\\"npm publish --tag=beta && git push --follow-tags\\\",\\n    \\\"lint\\\": \\\"prettier --check .\\\",\\n    \\\"fix\\\": \\\"prettier --write .\\\",\\n    \\\"verify\\\": \\\"npm run lint && npm run build && npm run test\\\",\\n    \\\"test\\\": \\\"web-test-runner\\\",\\n    \\\"test:watch\\\": \\\"web-test-runner --watch\\\"\\n  },\\n  \\\"keywords\\\": [\\n    \\\"web-components\\\",\\n    \\\"syntax highlighting\\\",\\n    \\\"diffs\\\",\\n    \\\"diff\\\"\\n  ],\\n  \\\"license\\\": \\\"MIT\\\",\\n  \\\"repository\\\": \\\"git@github.com:KonnorRogers/diff-view-element.git\\\",\\n  \\\"bugs\\\": {\\n    \\\"url\\\": \\\"https://github.com/KonnorRogers/diff-view-element/issues\\\"\\n  },\\n  \\\"homepage\\\": \\\"https://github.com/KonnorRogers/diff-view-element\\\",\\n  \\\"author\\\": \\\"KonnorRogers \\\",\\n  \\\"publishConfig\\\": {\\n    \\\"access\\\": \\\"public\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@custom-elements-manifest/analyzer\\\": \\\"0.10.2\\\",\\n    \\\"@esm-bundle/chai\\\": \\\"4.3.4-fix.0\\\",\\n    \\\"@open-wc/testing\\\": \\\"^4.0.0\\\",\\n    \\\"@open-wc/testing-helpers\\\": \\\"^3.0.1\\\",\\n    \\\"@types/diff\\\": \\\"^5.2.1\\\",\\n    \\\"@types/node\\\": \\\"^20.14.8\\\",\\n    \\\"@web/test-runner\\\": \\\"^0.18.2\\\",\\n    \\\"@web/test-runner-commands\\\": \\\"^0.9.0\\\",\\n    \\\"@web/test-runner-playwright\\\": \\\"^0.11.0\\\",\\n    \\\"cem-plugin-expanded-types\\\": \\\"^1.3.1\\\",\\n    \\\"esbuild\\\": \\\"^0.23.0\\\",\\n    \\\"gh-pages\\\": \\\"^6.1.1\\\",\\n    \\\"glob\\\": \\\"^10.4.1\\\",\\n    \\\"globby\\\": \\\"^14.0.2\\\",\\n    \\\"playwright\\\": \\\"^1.44.1\\\",\\n    \\\"plop\\\": \\\"^4.0.1\\\",\\n    \\\"prettier\\\": \\\"^3.3.3\\\",\\n    \\\"rimraf\\\": \\\"^5.0.7\\\",\\n    \\\"typedoc\\\": \\\"^0.26.1\\\",\\n    \\\"typescript\\\": \\\"~5.5.2\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"diff\\\": \\\"^5.2.0\\\",\\n    \\\"lit\\\": \\\"^3.1.4\\\",\\n    \\\"prism-esm\\\": \\\"1.29.0-fix.4\\\",\\n    \\\"web-component-define\\\": \\\"^2.0.11\\\"\\n  },\\n  \\\"customElements\\\": \\\"custom-elements.json\\\"\\n}\",\"README.md\":\"# ``\\n\\nA web component for displaying diffs between 2 strings in the browser. Similar to the GitHub diff UI. Usable for things beyond just code.\\n\\n## Documentation\\n\\n\\n\\n## Picture of the viewer\\n\\n![Picture of the diff viewer](/diff-view-example.png)\\n\",\"types/index.d.ts\":\"\",\"exports/components/basic-diff-view-element/basic-diff-view-element-globals.d.ts\":\"import type BasicDiffViewElement from \\\"./basic-diff-view-element.js\\\";\\ndeclare global {\\n    interface HTMLElementTagNameMap {\\n        \\\"basic-diff-view-element\\\": BasicDiffViewElement;\\n    }\\n}\\nexport {};\\n\",\"exports/components/basic-diff-view-element/basic-diff-view-element-globals.ts\":\"import type BasicDiffViewElement from \\\"./basic-diff-view-element.js\\\";\\n\\ndeclare global {\\n  interface HTMLElementTagNameMap {\\n    \\\"basic-diff-view-element\\\": BasicDiffViewElement;\\n  }\\n}\\n\\nexport {};\\n\",\"exports/components/basic-diff-view-element/basic-diff-view-element-register.d.ts\":\"export default BasicDiffViewElement;\\nexport * from \\\"./basic-diff-view-element.js\\\";\\nimport BasicDiffViewElement from \\\"./basic-diff-view-element.js\\\";\\n\",\"exports/components/basic-diff-view-element/basic-diff-view-element-register.js\":\"// @ts-check\\nimport BasicDiffViewElement from \\\"./basic-diff-view-element.js\\\";\\n\\nBasicDiffViewElement.define(\\\"basic-diff-view-element\\\");\\n\\nexport default BasicDiffViewElement;\\nexport * from \\\"./basic-diff-view-element.js\\\";\\n\\n/**\\n * @type {import(\\\"./basic-diff-view-element-globals.js\\\")}\\n */\\n\",\"exports/components/basic-diff-view-element/basic-diff-view-element.d.ts\":\"/**\\n * @typedef {object} LineDiffData\\n * @property {number} length - length of the diff.\\n * @property {import(\\\"../../utils/compute-line-info.js\\\").DiffTypeValues} type - The type of diff\\n * @property {number} offset - The offset along the X axis where the diff starts.\\n * @property {string} offsetValue - The characters prior to the current char diff\\n * @property {string} value - The current characters in the diff\\n * @property {string} lineValue - The current value from diffInfo for the line. Mainly used for debugging.\\n */\\n/**\\n * A minimal version of ``. It does not implement PrismJS for syntax highlighting.\\n * @customElement\\n * @tagname basic-diff-view-element\\n * @documentation https://konnorrogers.github.io/diff-view-element/components/basic-diff-view-element\\n * @status experimental\\n * @since 1.0\\n */\\nexport default class BasicDiffViewElement extends BaseElement {\\n    /**\\n     * @override\\n     */\\n    static override styles: import(\\\"lit\\\").CSSResult[];\\n    /**\\n     * @override\\n     */\\n    static override get properties(): {\\n        readonly view: {};\\n        readonly newValue: {\\n            readonly attribute: \\\"new-value\\\";\\n        };\\n        readonly oldValue: {\\n            readonly attribute: \\\"old-value\\\";\\n        };\\n        readonly preserveWhitespace: {\\n            readonly type: BooleanConstructor;\\n            readonly attribute: \\\"preserve-whitespace\\\";\\n        };\\n        readonly disableLineNumbers: {\\n            readonly type: BooleanConstructor;\\n            readonly reflect: true;\\n            readonly attribute: \\\"disable-line-numbers\\\";\\n        };\\n        readonly lineNumberStart: {\\n            readonly type: NumberConstructor;\\n            readonly attribute: \\\"line-number-start\\\";\\n        };\\n        readonly wrap: {\\n            readonly reflect: true;\\n            readonly attribute: \\\"wrap\\\";\\n        };\\n        readonly language: {\\n            readonly reflect: true;\\n        };\\n    };\\n    /**\\n     * The value to be displayed on the right in a split view\\n     * @type {string}\\n     */\\n    newValue: string;\\n    /**\\n     * The value to be displayed on the left in a split view\\n     * @type {string}\\n     */\\n    oldValue: string;\\n    /**\\n     * Side by side comparison of the diff. Currently the only view supported is \\\"split\\\" view (side by side).\\n     * @type {\\\"split\\\"}\\n     */\\n    view: \\\"split\\\";\\n    /**\\n     * The language to highlight for. This won't do much for ``, but makes rendering consistent.\\n     * Supported languages out of the box are \\\"plaintext\\\", \\\"html\\\", \\\"javascript\\\", \\\"markdown\\\", \\\"css\\\", \\\"js\\\", \\\"ts\\\"\\n     * For more on how to add additional languages, check out the docs.\\n     *   [Adding languages for highlighting](/guides/adding-languages-for-highlighting)\\n     * @type {string}\\n     */\\n    language: string;\\n    /**\\n     * @type {Boolean}\\n     * Whether or not to preserve white spaces from templates and attempt to dedent and chomp new lines.\\n     */\\n    preserveWhitespace: boolean;\\n    /**\\n     * @type {boolean} whether or not to disable line numbers\\n     */\\n    disableLineNumbers: boolean;\\n    /**\\n     * Where to start counting indexes in the gutter. Note, this is purely for display purposes.\\n     * @type {number}\\n     */\\n    lineNumberStart: number;\\n    /**\\n     * We will take the code, wrap it in `` and run it through Prism.js.\\n     * @type {string}\\n     */\\n    code: string;\\n    /**\\n     * @property\\n     * @type {\\\"soft\\\" | \\\"hard\\\"}\\n     * If `wrap=\\\"soft\\\"`, lines will wrap when they reach the edge of their container. If `wrap=\\\"none\\\"`, lines will not wrap instead all the user to scroll horizontally to see more code.\\n     */\\n    wrap: \\\"soft\\\" | \\\"hard\\\";\\n    /**\\n     * Whether or not to transform `&lt;/script>` into `` from slotted content.\\n     * @internal\\n     * @param {string} text\\n     */\\n    unescapeTags(text: string): string;\\n}\\nexport type LineDiffData = {\\n    /**\\n     * - length of the diff.\\n     */\\n    length: number;\\n    /**\\n     * - The type of diff\\n     */\\n    type: import(\\\"../../utils/compute-line-info.js\\\").DiffTypeValues;\\n    /**\\n     * - The offset along the X axis where the diff starts.\\n     */\\n    offset: number;\\n    /**\\n     * - The characters prior to the current char diff\\n     */\\n    offsetValue: string;\\n    /**\\n     * - The current characters in the diff\\n     */\\n    value: string;\\n    /**\\n     * - The current value from diffInfo for the line. Mainly used for debugging.\\n     */\\n    lineValue: string;\\n};\\nimport { BaseElement } from \\\"../../../internal/base-element.js\\\";\\nimport { computeLineInformation } from \\\"../../utils/compute-line-info.js\\\";\\n\",\"exports/components/basic-diff-view-element/basic-diff-view-element.js\":\"import { html } from \\\"lit\\\";\\n\\nimport { BaseElement } from \\\"../../../internal/base-element.js\\\";\\nimport { baseStyles } from \\\"../../styles/base-styles.js\\\";\\nimport { componentStyles } from \\\"./basic-diff-view-element.styles.js\\\";\\n\\nimport { computeLineInformation } from \\\"../../utils/compute-line-info.js\\\";\\n\\nimport { replaceLast } from \\\"../../../internal/replace-functions.js\\\";\\nimport { elementsToString } from \\\"../../../internal/elements-to-strings.js\\\";\\nimport { dedent } from \\\"../../../internal/dedent.js\\\";\\nimport { basicTheme } from \\\"../../styles/basic-theme.styles.js\\\";\\n\\nconst DIFF_CONVERTER = /** @const */ {\\n  added: \\\"inserted\\\",\\n  removed: \\\"deleted\\\",\\n};\\n\\n/**\\n * @typedef {object} LineDiffData\\n * @property {number} length - length of the diff.\\n * @property {import(\\\"../../utils/compute-line-info.js\\\").DiffTypeValues} type - The type of diff\\n * @property {number} offset - The offset along the X axis where the diff starts.\\n * @property {string} offsetValue - The characters prior to the current char diff\\n * @property {string} value - The current characters in the diff\\n * @property {string} lineValue - The current value from diffInfo for the line. Mainly used for debugging.\\n */\\n\\n/**\\n * A minimal version of ``. It does not implement PrismJS for syntax highlighting.\\n * @customElement\\n * @tagname basic-diff-view-element\\n * @documentation https://konnorrogers.github.io/diff-view-element/components/basic-diff-view-element\\n * @status experimental\\n * @since 1.0\\n */\\nexport default class BasicDiffViewElement extends BaseElement {\\n  /**\\n   * @override\\n   */\\n  static baseName = \\\"basic-diff-view-element\\\";\\n\\n  /**\\n   * @override\\n   */\\n  static styles = [baseStyles, componentStyles, basicTheme];\\n\\n  /**\\n   * @override\\n   */\\n  static get properties() {\\n    return /** @type {const} */ ({\\n      view: {},\\n      newValue: { attribute: \\\"new-value\\\" },\\n      oldValue: { attribute: \\\"old-value\\\" },\\n\\n      preserveWhitespace: { type: Boolean, attribute: \\\"preserve-whitespace\\\" },\\n      disableLineNumbers: {\\n        type: Boolean,\\n        reflect: true,\\n        attribute: \\\"disable-line-numbers\\\",\\n      },\\n      lineNumberStart: { type: Number, attribute: \\\"line-number-start\\\" },\\n      wrap: { reflect: true, attribute: \\\"wrap\\\" },\\n      language: { reflect: true },\\n    });\\n  }\\n\\n  constructor() {\\n    super();\\n\\n    /**\\n     * The value to be displayed on the right in a split view\\n     * @type {string}\\n     */\\n    this.newValue = \\\"\\\";\\n\\n    /**\\n     * The value to be displayed on the left in a split view\\n     * @type {string}\\n     */\\n    this.oldValue = \\\"\\\";\\n\\n    /**\\n     * Side by side comparison of the diff. Currently the only view supported is \\\"split\\\" view (side by side).\\n     * @type {\\\"split\\\"}\\n     */\\n    this.view = \\\"split\\\";\\n\\n    /**\\n     * The language to highlight for. This won't do much for ``, but makes rendering consistent.\\n     * Supported languages out of the box are \\\"plaintext\\\", \\\"html\\\", \\\"javascript\\\", \\\"markdown\\\", \\\"css\\\", \\\"js\\\", \\\"ts\\\"\\n     * For more on how to add additional languages, check out the docs.\\n     *   [Adding languages for highlighting](/guides/adding-languages-for-highlighting)\\n     * @type {string}\\n     */\\n    this.language = \\\"plaintext\\\";\\n\\n    /**\\n     * @type {Boolean}\\n     * Whether or not to preserve white spaces from templates and attempt to dedent and chomp new lines.\\n     */\\n    this.preserveWhitespace = false;\\n\\n    /**\\n     * @type {boolean} whether or not to disable line numbers\\n     */\\n    this.disableLineNumbers = false;\\n\\n    /**\\n     * Where to start counting indexes in the gutter. Note, this is purely for display purposes.\\n     * @type {number}\\n     */\\n    this.lineNumberStart = 1;\\n\\n    /**\\n     * We will take the code, wrap it in `` and run it through Prism.js.\\n     * @type {string}\\n     */\\n    this.code = \\\"\\\";\\n\\n    /**\\n     * @property\\n     * @type {\\\"soft\\\" | \\\"hard\\\"}\\n     * If `wrap=\\\"soft\\\"`, lines will wrap when they reach the edge of their container. If `wrap=\\\"none\\\"`, lines will not wrap instead all the user to scroll horizontally to see more code.\\n     */\\n    this.wrap = \\\"hard\\\";\\n\\n    /**\\n     * Whether or not to transform `&lt;/script>` into `` from slotted content.\\n   * @internal\\n   * @param {string} text\\n   */\\n  unescapeTags(text) {\\n    const unescapeRegex = /&lt;\\\\/script>/g;\\n    if (this.unescapeBehavior === \\\"last\\\") {\\n      return replaceLast(text, unescapeRegex);\\n    }\\n\\n    if (this.unescapeBehavior === \\\"all\\\") {\\n      return text.replaceAll(unescapeRegex, \\\"\\\");\\n    }\\n\\n    return text;\\n  }\\n}\\n\",\"exports/components/basic-diff-view-element/basic-diff-view-element.styles.d.ts\":\"export const componentStyles: import(\\\"lit\\\").CSSResult;\\n\",\"exports/components/basic-diff-view-element/basic-diff-view-element.styles.js\":\"import { css } from \\\"lit\\\";\\n\\nexport const componentStyles = css`\\n  :host {\\n    display: block;\\n  }\\n\\n  [part~=\\\"base\\\"] {\\n    max-height: 100%;\\n    max-width: 100%;\\n  }\\n\\n  table {\\n    border-collapse: collapse;\\n  }\\n\\n  td {\\n    vertical-align: top;\\n  }\\n\\n  code {\\n    display: block;\\n    white-space: inherit;\\n    overflow-wrap: inherit;\\n    word-break: inherit;\\n    white-space: inherit;\\n  }\\n\\n  [part~=\\\"pre\\\"] {\\n    max-width: 100%;\\n    min-width: 100%;\\n    overflow: auto;\\n\\n    /** Always soft wrap with diffs. Overflows get weird. */\\n    overflow-wrap: break-word;\\n    word-break: break-word;\\n    white-space: pre-wrap;\\n  }\\n\\n  [part~=\\\"gutter-cell\\\"] {\\n    -webkit-user-select: none;\\n    user-select: none;\\n    font-variant-numeric: tabular-nums;\\n    color: rgba(0, 0, 0, 0.35);\\n    background-color: var(--syntax-bg);\\n    vertical-align: top;\\n    border-inline-end: 1px solid gray;\\n    word-break: normal;\\n    padding-top: 2px;\\n    padding-bottom: 2px;\\n    padding-inline-end: 8px;\\n    padding-inline-start: 20px;\\n    /** This innocuous \\\"width: 1ch;\\\" is what saves the gutter from taking up too much space. */\\n    width: 1ch;\\n  }\\n\\n  [part~=\\\"line\\\"] {\\n    text-align: start;\\n  }\\n\\n  :host([disable-line-numbers]) [part~=\\\"gutter-cell\\\"] {\\n    display: none;\\n  }\\n\\n  [part~=\\\"line-number\\\"] {\\n    display: block;\\n    /** min-width: 100%; is needed for Safari to calculate correctly. */\\n    min-width: 100%;\\n    width: max-content;\\n    text-align: end;\\n    user-select: none;\\n    -webkit-user-select: none;\\n  }\\n\\n  table {\\n    border: 1px solid gray;\\n    width: 100%;\\n  }\\n\\n  [part~=\\\"line\\\"] {\\n    border-inline-end: 1px solid gray;\\n    padding-inline-start: 4px;\\n  }\\n\\n  [part~=\\\"diff-marker\\\"],\\n  [part~=\\\"gutter-cell\\\"],\\n  [part~=\\\"line\\\"] {\\n    min-height: 1lh;\\n    white-space: inherit;\\n    word-break: inherit;\\n  }\\n\\n  [part~=\\\"diff-marker\\\"] {\\n    text-align: center;\\n    -webkit-user-select: none;\\n    user-select: none;\\n    font-variant-numeric: tabular-nums;\\n    width: calc(1ch + 8px);\\n    padding-inline-start: 8px;\\n  }\\n\\n  [part~=\\\"diff-marker\\\"]::after {\\n    content: \\\" \\\";\\n    width: max-content;\\n    max-width: max-content;\\n    min-width: max-content;\\n  }\\n\\n  [part~=\\\"diff-marker\\\"][part~=\\\"diff-marker-deleted\\\"]::after {\\n    content: \\\"-\\\";\\n  }\\n\\n  [part~=\\\"diff-marker\\\"][part~=\\\"diff-marker-inserted\\\"]::after {\\n    content: \\\"+\\\";\\n  }\\n\\n  [part~=\\\"character-diff\\\"][part~=\\\"character-diff--deleted\\\"] {\\n    background: hsla(353, 95%, 46%, 0.15);\\n  }\\n\\n  [part~=\\\"character-diff\\\"][part~=\\\"character-diff--inserted\\\"] {\\n    background: hsla(137, 100%, 75%);\\n  }\\n\\n  table tr td:nth-child(3),\\n  table tr td:nth-child(6) {\\n    -webkit-user-select: auto;\\n    user-select: auto;\\n  }\\n\\n  /**\\n    This fancy shenanigans is what allows users to only select 1 side of a diff.\\n    Inspired by this hack: https://stackoverflow.com/posts/73517303/revisions\\n  */\\n  table[active-side=\\\"right\\\"] tr td:nth-child(3),\\n  table[active-side=\\\"left\\\"] tr td:nth-child(6) {\\n    -webkit-user-select: none;\\n    user-select: none;\\n  }\\n\\n  /** I'm not quite sure why its \\\"n+4\\\" instead of \\\"n+3\\\", when  1-3 is the left, and  4-6 is the right */\\n\\n  /** Left half */\\n  table:not([active-side=\\\"right\\\"]):has(tr td:nth-child(-n + 4):hover)\\n    tr\\n    td:nth-child(3) {\\n    -webkit-user-select: auto;\\n    user-select: auto;\\n  }\\n\\n  /** Right half */\\n  table:not([active-side=\\\"left\\\"]):has(tr td:nth-child(n + 3):hover)\\n    tr\\n    td:nth-child(6) {\\n    -webkit-user-select: auto;\\n    user-select: auto;\\n  }\\n`;\\n\",\"exports/components/diff-view-element/diff-view-element-globals.d.ts\":\"import type DiffViewElement from \\\"./diff-view-element.js\\\";\\ndeclare global {\\n    interface HTMLElementTagNameMap {\\n        \\\"diff-view-element\\\": DiffViewElement;\\n    }\\n}\\nexport {};\\n\",\"exports/components/diff-view-element/diff-view-element-globals.ts\":\"import type DiffViewElement from \\\"./diff-view-element.js\\\";\\n\\ndeclare global {\\n  interface HTMLElementTagNameMap {\\n    \\\"diff-view-element\\\": DiffViewElement;\\n  }\\n}\\n\\nexport {};\\n\",\"exports/components/diff-view-element/diff-view-element-register.d.ts\":\"export default DiffViewElement;\\nexport * from \\\"./diff-view-element.js\\\";\\nimport DiffViewElement from \\\"./diff-view-element.js\\\";\\n\",\"exports/components/diff-view-element/diff-view-element-register.js\":\"// @ts-check\\nimport DiffViewElement from \\\"./diff-view-element.js\\\";\\n\\nDiffViewElement.define(\\\"diff-view-element\\\");\\n\\nexport default DiffViewElement;\\nexport * from \\\"./diff-view-element.js\\\";\\n\\n/**\\n * @type {import(\\\"./diff-view-element-globals.js\\\")}\\n */\\n\",\"exports/components/diff-view-element/diff-view-element.d.ts\":\"/**\\n * A diff viewer complete with PrismJS for syntax highlighting.\\n * @customElement\\n * @tagname diff-view-element\\n * @documentation https://konnorrogers.github.io/diff-view-elements/components/diff-view-element\\n * @status experimental\\n * @since 1.0\\n */\\nexport default class DiffViewElement extends BasicDiffViewElement {\\n    /**\\n     * @override\\n     */\\n    static override get properties(): {\\n        readonly highlighter: {\\n            readonly attribute: false;\\n            readonly state: true;\\n        };\\n        readonly view: {};\\n        readonly newValue: {\\n            readonly attribute: \\\"new-value\\\";\\n        };\\n        readonly oldValue: {\\n            readonly attribute: \\\"old-value\\\";\\n        };\\n        readonly preserveWhitespace: {\\n            readonly type: BooleanConstructor;\\n            readonly attribute: \\\"preserve-whitespace\\\";\\n        };\\n        readonly disableLineNumbers: {\\n            readonly type: BooleanConstructor;\\n            readonly reflect: true;\\n            readonly attribute: \\\"disable-line-numbers\\\";\\n        };\\n        readonly lineNumberStart: {\\n            readonly type: NumberConstructor;\\n            readonly attribute: \\\"line-number-start\\\";\\n        };\\n        readonly wrap: {\\n            readonly reflect: true;\\n            readonly attribute: \\\"wrap\\\";\\n        };\\n        readonly language: {\\n            readonly reflect: true;\\n        };\\n    };\\n    /**\\n     * Points to an instance of Prism from \\\"prism-esm\\\" for adjusting highlighting, adding plugins, etc.\\n     * @type {ReturnType}\\n     */\\n    highlighter: ReturnType;\\n    /**\\n     * A plugin for Prism to add line numbers.\\n     * @param {import(\\\"../../utils/compute-line-info.js\\\").LineInformation[]} lineInfo\\n     * @param {\\\"right\\\" | \\\"left\\\"} side\\n     */\\n    lineNumberPlugin(lineInfo: import(\\\"../../utils/compute-line-info.js\\\").LineInformation[], side: \\\"right\\\" | \\\"left\\\"): import(\\\"../../../internal/prism-highlight.js\\\").Hook;\\n    /**\\n     * a \\\"wrap\\\" plugin for Prism to add parts to every token. Useful for external styling.\\n     * IE: `` becomes ``\\n     * @param {any} env\\n     */\\n    diffPartPlugin(env: any): void;\\n    /**\\n     * The meat and potatos of the PrismJS highlighter. It runs the tokenizer and adds the per-character diffs as well as applicable highlights.\\n     * @param {import(\\\"../../utils/compute-line-info.js\\\").LineInformation[]} lineInfo\\n     */\\n    syntaxHighlight(lineInfo: import(\\\"../../utils/compute-line-info.js\\\").LineInformation[]): void;\\n    lineInfo: import(\\\"../../utils/compute-line-info.js\\\").LineInformation[] | undefined;\\n    /**\\n     * Modify tokens from Prism.\\n     * @param {Token} token\\n     * @param {LineDiffData[]} data_array\\n     */\\n    modifyTokens(token: Token, data_array: LineDiffData[]): void;\\n    /**\\n     * Modifies a \\\"TokenStreamItem\\\" from Prism. T\\n     * @param {import(\\\"prism-esm/prism-core.js\\\").TokenStreamItem} token\\n     * @param {LineDiffData} data\\n     * @param {{ offset: number, count: number, value: string, offsetValue: string }} [currentData={offset: 0, count: 0, value: \\\"\\\", offsetValue: \\\"\\\"}] - The current number of characters modified. Once this reaches data.length, terminates.\\n     */\\n    modifyToken(token: import(\\\"prism-esm/prism-core.js\\\").TokenStreamItem, data: LineDiffData, currentData?: {\\n        offset: number;\\n        count: number;\\n        value: string;\\n        offsetValue: string;\\n    } | undefined): void;\\n    /**\\n     * @param {import(\\\"prism-esm/prism-core.js\\\").TokenStreamItem & { touched: boolean; touchedIndexes: Set }} token\\n     * @param {null | number} index\\n     * @param {LineDiffData} data\\n     * @param {*} currentData\\n     */\\n    modifyTokenContent(token: import(\\\"prism-esm/prism-core.js\\\").TokenStreamItem & {\\n        touched: boolean;\\n        touchedIndexes: Set;\\n    }, index: null | number, data: LineDiffData, currentData: any): void;\\n}\\nexport type LineDiffData = import(\\\"../basic-diff-view-element/basic-diff-view-element.js\\\").LineDiffData;\\nimport BasicDiffViewElement from \\\"../basic-diff-view-element/basic-diff-view-element-register.js\\\";\\nimport { createPrismInstance } from \\\"../../../internal/prism-highlight.js\\\";\\nimport { Token } from \\\"prism-esm\\\";\\n\",\"exports/components/diff-view-element/diff-view-element.js\":\"import { html } from \\\"lit\\\";\\nimport { unsafeHTML } from \\\"lit/directives/unsafe-html.js\\\";\\nimport { Token } from \\\"prism-esm\\\";\\n\\nimport { baseStyles } from \\\"../../styles/base-styles.js\\\";\\nimport { componentStyles } from \\\"./diff-view-element.styles.js\\\";\\nimport { theme } from \\\"../../styles/default-theme.styles.js\\\";\\n\\nimport {\\n  createPrismInstance,\\n  PrismEnv,\\n} from \\\"../../../internal/prism-highlight.js\\\";\\nimport { LineNumberPlugin } from \\\"../../../internal/line-number-plugin.js\\\";\\nimport { LineHighlightWrapPlugin } from \\\"../../../internal/line-highlight-plugin.js\\\";\\nimport BasicDiffViewElement from \\\"../basic-diff-view-element/basic-diff-view-element-register.js\\\";\\n\\n/**\\n * @typedef {import(\\\"../basic-diff-view-element/basic-diff-view-element.js\\\").LineDiffData} LineDiffData\\n */\\n\\nclass CustomToken extends Token {\\n  /**\\n   * @param {ConstructorParameters} args\\n   */\\n  constructor(...args) {\\n    super(...args);\\n\\n    /**\\n     * @type {null | number}\\n     */\\n    this.lineNumber = null;\\n  }\\n}\\n\\nconst DIFF_CONVERTER = /** @const */ {\\n  added: \\\"inserted\\\",\\n  removed: \\\"deleted\\\",\\n};\\n\\n/**\\n * A diff viewer complete with PrismJS for syntax highlighting.\\n * @customElement\\n * @tagname diff-view-element\\n * @documentation https://konnorrogers.github.io/diff-view-elements/components/diff-view-element\\n * @status experimental\\n * @since 1.0\\n */\\nexport default class DiffViewElement extends BasicDiffViewElement {\\n  /**\\n   * @override\\n   */\\n  static baseName = \\\"diff-view-element\\\";\\n\\n  /**\\n   * @override\\n   */\\n  static styles = [baseStyles, theme, componentStyles];\\n\\n  /**\\n   * @override\\n   */\\n  static get properties() {\\n    return /** @type {const} */ ({\\n      ...super.properties,\\n      highlighter: { attribute: false, state: true },\\n    });\\n  }\\n\\n  constructor() {\\n    super();\\n\\n    /**\\n     * The language to highlight for.\\n     * Supported languages out of the box are \\\"plaintext\\\", \\\"html\\\", \\\"javascript\\\", \\\"markdown\\\", \\\"css\\\", \\\"js\\\", \\\"ts\\\"\\n     * For more on how to add additional languages, check out the docs.\\n     *   [Adding languages for highlighting](/guides/adding-languages-for-highlighting)\\n     * @type {string}\\n     */\\n    this.language = \\\"plaintext\\\";\\n\\n    /**\\n     * Points to an instance of Prism from \\\"prism-esm\\\" for adjusting highlighting, adding plugins, etc.\\n     * @type {ReturnType}\\n     */\\n    this.highlighter = createPrismInstance();\\n  }\\n\\n  /**\\n   * Transform line info via side effects.\\n   * @override\\n   * @type {BasicDiffViewElement[\\\"transformLineInformation\\\"]}\\n   */\\n  transformLineInformation(lineInfo) {\\n    super.transformLineInformation(lineInfo);\\n    this.syntaxHighlight(lineInfo);\\n  }\\n\\n  /**\\n   * @override\\n   * @param {import(\\\"../../utils/compute-line-info.js\\\").DiffInformation} diffInfo\\n   */\\n  renderLine(diffInfo) {\\n    return html`${unsafeHTML(/** @type {string} */ (diffInfo.value))}`;\\n  }\\n\\n  /**\\n   * A plugin for Prism to add line numbers.\\n   * @param {import(\\\"../../utils/compute-line-info.js\\\").LineInformation[]} lineInfo\\n   * @param {\\\"right\\\" | \\\"left\\\"} side\\n   */\\n  lineNumberPlugin(lineInfo, side) {\\n    return LineNumberPlugin({\\n      lineNumberStart: this.lineNumberStart,\\n      callback: (ary, index, tokens) => {\\n        // This token won't get used, but makes it easy to render things based on array index.\\n        const row = new Token(\\\"row\\\", []);\\n        tokens.push(row);\\n\\n        const lineData = lineInfo[index];\\n        if (!lineData) {\\n          return;\\n        }\\n\\n        const lineNumber = lineData[side]?.lineNumber;\\n        const lineExists = lineNumber != null;\\n\\n        const lineTokens = [\\n          new CustomToken(\\\"gutter-cell\\\", [\\n            new CustomToken(\\n              \\\"line-number\\\",\\n              lineExists\\n                ? (lineNumber + this.lineNumberStart - 1).toString()\\n                : \\\"\\\",\\n            ),\\n          ]),\\n          new CustomToken(\\\"diff-marker\\\", \\\"\\\"),\\n          new CustomToken(\\\"diff-line\\\", ary),\\n        ];\\n\\n        // Add line numbers so we can easily add diffs.\\n        lineTokens.forEach((token) => {\\n          token.lineNumber = lineExists ? lineNumber : null;\\n\\n          if (Array.isArray(row.content)) {\\n            row.content.push(token);\\n          }\\n        });\\n      },\\n    });\\n  }\\n  /**\\n   * a \\\"wrap\\\" plugin for Prism to add parts to every token. Useful for external styling.\\n   * IE: `` becomes ``\\n   * @param {any} env\\n   */\\n  diffPartPlugin(env) {\\n    const cells = [\\\"diff-line\\\", \\\"diff-marker\\\", \\\"gutter-cell\\\"];\\n\\n    const isTableCell = cells.some((str) => env.type.match(str));\\n\\n    if (isTableCell) {\\n      env.tag = \\\"td\\\";\\n    }\\n\\n    // Add wrap for `light-character-diff--${\\\"removed\\\" | \\\"added\\\"}`\\n\\n    if (env.type.startsWith(\\\"character-diff\\\")) {\\n      const [base, diffType] = env.type.split(/--/);\\n\\n      const type =\\n        DIFF_CONVERTER[/** @type {keyof typeof DIFF_CONVERTER} */ (diffType)] ||\\n        \\\"\\\";\\n\\n      // part=\\\"character-diff character-diff--{inserted|deleted}\\\"\\n      env.attributes[\\\"part\\\"] = `${base} ${base}--${type}`;\\n    }\\n\\n    // We dont need to add parts for our own custom tokens.\\n    if (env.type.startsWith(\\\"character-diff\\\") || isTableCell) {\\n      return;\\n    }\\n\\n    // These are all tokens from Prism. Map their class name to a part for easy theming.\\n    env.attributes[\\\"part\\\"] = `token ${env.type}`;\\n  }\\n\\n  /**\\n   * The meat and potatos of the PrismJS highlighter. It runs the tokenizer and adds the per-character diffs as well as applicable highlights.\\n   * @param {import(\\\"../../utils/compute-line-info.js\\\").LineInformation[]} lineInfo\\n   */\\n  syntaxHighlight(lineInfo) {\\n    const leftObj = {\\n      value:\\n        /** @type {import(\\\"../../utils/compute-line-info.js\\\").DiffInformation[\\\"value\\\"]}  */ ([]),\\n      insertedLines: new Set(),\\n      deletedLines: new Set(),\\n    };\\n\\n    const rightObj = {\\n      value:\\n        /** @type {import(\\\"../../utils/compute-line-info.js\\\").DiffInformation[\\\"value\\\"]}  */ ([]),\\n      insertedLines: new Set(),\\n      deletedLines: new Set(),\\n    };\\n\\n    lineInfo.forEach((line) => {\\n      const leftLineInfo = /** @type {string} */ (line.left.value);\\n      if (line.left.type === \\\"removed\\\") {\\n        leftObj.deletedLines.add(line.left.lineNumber);\\n      }\\n\\n      /** @type {string[]} */ (leftObj.value).push(leftLineInfo);\\n\\n      const rightLineInfo = /** @type {string} */ (line.right.value);\\n\\n      if (line.right.type === \\\"added\\\") {\\n        rightObj.insertedLines.add(line.right.lineNumber);\\n      }\\n\\n      /** @type {string[]} */ (rightObj.value).push(rightLineInfo);\\n    });\\n\\n    if (!this.highlighter) {\\n      this.highlighter = createPrismInstance();\\n    }\\n\\n    this.highlighter.hooks.add(\\\"wrap\\\", this.diffPartPlugin);\\n    this.highlighter.hooks.add(\\n      \\\"wrap\\\",\\n      /** @type {any} */ (LineHighlightWrapPlugin()),\\n    );\\n\\n    const leftEnv = PrismEnv(\\n      /** @type {string[]} */ (leftObj.value).join(\\\"\\\\n\\\"),\\n      this.highlighter.languages[this.language],\\n      this.language,\\n      this.highlighter,\\n      {\\n        afterTokenize: [\\n          this.lineNumberPlugin(lineInfo, \\\"left\\\"),\\n          (env) => {\\n            env.tokens.forEach((wrapperToken) => {\\n              /** @type {CustomToken[]} */ (\\n                /** @type {Token} */ (wrapperToken).content\\n              ).forEach((token) => {\\n                if (typeof token === \\\"string\\\") return;\\n\\n                if (token.lineNumber === null) {\\n                  return;\\n                }\\n\\n                if (leftObj.deletedLines.has(token.lineNumber)) {\\n                  token.type += \\\" deleted\\\";\\n                }\\n              });\\n            });\\n          },\\n        ],\\n      },\\n    );\\n\\n    leftEnv.tokens.forEach((token, index) => {\\n      const data = lineInfo[index]?.left?.data;\\n\\n      if (typeof token === \\\"string\\\") {\\n        return;\\n      }\\n\\n      if (data == null) {\\n        return;\\n      }\\n\\n      this.modifyTokens(token, data);\\n\\n      const line = Token.stringify(\\n        this.highlighter.util.encode(\\n          /** @type {import(\\\"prism-esm\\\").Token[]} */ (token.content),\\n        ),\\n        this.language,\\n        this.highlighter,\\n      );\\n      lineInfo[index].left.value = line;\\n    });\\n\\n    const rightEnv = PrismEnv(\\n      /** @type {string[]} */ (rightObj.value).join(\\\"\\\\n\\\"),\\n      this.highlighter.languages[this.language],\\n      this.language,\\n      this.highlighter,\\n      {\\n        afterTokenize: [\\n          this.lineNumberPlugin(lineInfo, \\\"right\\\"),\\n          (env) => {\\n            env.tokens.forEach((wrapperToken) => {\\n              /** @type {CustomToken[]} */ (\\n                /** @type {Token} */ (wrapperToken).content\\n              ).forEach((token) => {\\n                if (typeof token === \\\"string\\\") return;\\n\\n                if (token.lineNumber === null) {\\n                  return;\\n                }\\n                if (rightObj.insertedLines.has(token.lineNumber)) {\\n                  token.type += \\\" inserted\\\";\\n                }\\n              });\\n            });\\n          },\\n        ],\\n      },\\n    );\\n\\n    this.lineInfo = lineInfo;\\n\\n    rightEnv.tokens.forEach((token, index) => {\\n      const data = lineInfo[index]?.right?.data;\\n\\n      if (typeof token === \\\"string\\\") {\\n        return;\\n      }\\n\\n      if (data == null) {\\n        return;\\n      }\\n\\n      this.modifyTokens(token, data);\\n\\n      const line = Token.stringify(\\n        this.highlighter.util.encode(\\n          /** @type {import(\\\"prism-esm\\\").Token[]} */ (token.content),\\n        ),\\n        this.language,\\n        this.highlighter,\\n      );\\n      lineInfo[index].right.value = line;\\n    });\\n  }\\n\\n  /**\\n   * Modify tokens from Prism.\\n   * @param {Token} token\\n   * @param {LineDiffData[]} data_array\\n   */\\n  modifyTokens(token, data_array) {\\n    if (data_array.length }\\n     */\\n    const important_types = [\\\"removed\\\", \\\"added\\\"];\\n\\n    data_array.forEach((data) => {\\n      if (!important_types.includes(data.type)) {\\n        return;\\n      }\\n\\n      // We only care about \\\"removed\\\" and \\\"inserted\\\"\\n      this.modifyToken(token, data);\\n    });\\n  }\\n\\n  /**\\n   * Modifies a \\\"TokenStreamItem\\\" from Prism. T\\n   * @param {import(\\\"prism-esm/prism-core.js\\\").TokenStreamItem} token\\n   * @param {LineDiffData} data\\n   * @param {{ offset: number, count: number, value: string, offsetValue: string }} [currentData={offset: 0, count: 0, value: \\\"\\\", offsetValue: \\\"\\\"}] - The current number of characters modified. Once this reaches data.length, terminates.\\n   */\\n  modifyToken(\\n    token,\\n    data,\\n    currentData = { offset: 0, count: 0, value: \\\"\\\", offsetValue: \\\"\\\" },\\n  ) {\\n    if (currentData.count >= data.length) {\\n      return;\\n    }\\n\\n    const skippedTokens = [\\\"gutter-cell\\\", \\\"diff-marker\\\"];\\n\\n    if (skippedTokens.some((tokenType) => token.type.match(tokenType))) {\\n      return;\\n    }\\n\\n    if (typeof token.content === \\\"string\\\") {\\n      this.modifyTokenContent(\\n        /** @type {import(\\\"prism-esm/prism-core.js\\\").TokenStreamItem & { touched: boolean; touchedIndexes: Set}} */\\n        (token),\\n        null,\\n        data,\\n        currentData,\\n      );\\n      return;\\n    }\\n\\n    if (token.content.length }} */\\n          (token),\\n          i,\\n          data,\\n          currentData,\\n        );\\n      } else {\\n        this.modifyToken(child_token, data, currentData);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @param {import(\\\"prism-esm/prism-core.js\\\").TokenStreamItem & { touched: boolean; touchedIndexes: Set }} token\\n   * @param {null | number} index\\n   * @param {LineDiffData} data\\n   * @param {*} currentData\\n   */\\n  modifyTokenContent(token, index, data, currentData) {\\n    const content = index == null ? token.content : token.content[index];\\n\\n    if (typeof content !== \\\"string\\\") {\\n      return;\\n    }\\n\\n    if (token.touchedIndexes == null) {\\n      token.touchedIndexes = new Set();\\n    }\\n\\n    if (index != null && token.touchedIndexes.has(index)) {\\n      currentData.offset += content.length;\\n      currentData.offsetValue += content;\\n      return;\\n    }\\n\\n    if (index == null && token.touched) {\\n      currentData.offset += content.length;\\n      currentData.offsetValue += content;\\n      return;\\n    }\\n\\n    if (index == null) {\\n      token.touched = true;\\n    }\\n\\n    if (index != null) {\\n      token.touchedIndexes.add(index);\\n    }\\n\\n    const offsetStart = currentData.offset;\\n    const offsetEnd = currentData.offset + content.length;\\n\\n    if (offsetStart > data.offset + data.length) {\\n      currentData.offset += content.length;\\n      currentData.offsetValue += content;\\n      return;\\n    }\\n\\n    if (offsetEnd  */\\n    --syntax-gutter-border: 1px solid darkgray;\\n\\n    --syntax-highlight-bg: hsl(210, 9%, 95%);\\n    --syntax-highlight-selected-bg: hsla(230, 8%, 79%, 0.5);\\n\\n    --syntax-deleted-bg: hsla(353, 95%, 92%, 0.5);\\n    --syntax-deleted-selected-bg: hsla(353, 95%, 66%, 0.25);\\n\\n    --syntax-inserted-bg: hsla(137, 100%, 95%, 0.5);\\n    --syntax-inserted-selected-bg: hsla(135, 73%, 55%, 0.25);\\n\\n    /** Added only for basic-diff-view-element */\\n    --syntax-inserted-text-color: hsl(119, 34%, 37%);\\n    --syntax-deleted-text-color: hsl(5, 79%, 42%);\\n  }\\n\\n  code[class*=\\\"language-\\\"],\\n  pre[class*=\\\"language-\\\"] {\\n    background: var(--syntax-bg);\\n    color: var(--syntax-fg);\\n    direction: inherit;\\n    text-align: start;\\n    -webkit-hyphens: none;\\n    -moz-hyphens: none;\\n    -ms-hyphens: none;\\n    hyphens: none;\\n  }\\n\\n  /* Selection */\\n  code[class*=\\\"language-\\\"]::-moz-selection,\\n  code[class*=\\\"language-\\\"] *::-moz-selection,\\n  pre[class*=\\\"language-\\\"] *::-moz-selection {\\n    background: var(--syntax-selection-color);\\n    color: inherit;\\n  }\\n\\n  code[class*=\\\"language-\\\"]::selection,\\n  code[class*=\\\"language-\\\"] *::selection,\\n  pre[class*=\\\"language-\\\"] *::selection {\\n    background: var(--syntax-selection-color);\\n    color: inherit;\\n  }\\n\\n  /* Diff stuff */\\n  [part~=\\\"deleted\\\"] {\\n    background-color: var(--syntax-deleted-bg);\\n  }\\n\\n  [part~=\\\"deleted\\\"]::selection,\\n  [part~=\\\"deleted\\\"] *::selection {\\n    background-color: var(--syntax-deleted-selected-bg);\\n  }\\n\\n  [part~=\\\"inserted\\\"]::selection,\\n  [part~=\\\"inserted\\\"] *::selection {\\n    background-color: var(--syntax-inserted-selected-bg);\\n  }\\n\\n  [part~=\\\"inserted\\\"],\\n  [part~=\\\"inserted\\\"] {\\n    background-color: var(--syntax-inserted-bg);\\n  }\\n\\n  [part~=\\\"diff-marker\\\"][part~=\\\"diff-marker-inserted\\\"],\\n  [part~=\\\"gutter-cell\\\"][part~=\\\"gutter-cell-inserted\\\"] {\\n    color: var(--syntax-inserted-text-color);\\n  }\\n\\n  [part~=\\\"diff-marker\\\"][part~=\\\"diff-marker-deleted\\\"],\\n  [part~=\\\"gutter-cell\\\"][part~=\\\"gutter-cell-deleted\\\"] {\\n    color: var(--syntax-deleted-text-color);\\n  }\\n`;\\n\",\"exports/styles/default-theme.styles.d.ts\":\"export const theme: import(\\\"lit\\\").CSSResult;\\n\",\"exports/styles/default-theme.styles.js\":\"import { css } from \\\"lit\\\";\\nexport const theme = css`\\n  /**\\n * One Light theme for prism.js\\n * Based on Atom's One Light theme: https://github.com/atom/atom/tree/master/packages/one-light-syntax\\n */\\n\\n  /**\\n * One Light colours (accurate as of commit eb064bf on 19 Feb 2021)\\n * From colors.less\\n * --mono-1: hsl(230, 8%, 24%);\\n * --mono-2: hsl(230, 6%, 44%);\\n * --mono-3: hsl(230, 4%, 64%);\\n * --hue-1: hsl(198, 99%, 37%);\\n * --hue-2: hsl(221, 87%, 60%);\\n * --hue-3: hsl(301, 63%, 40%);\\n * --hue-4: hsl(119, 34%, 47%);\\n * --hue-5: hsl(5, 74%, 59%);\\n * --hue-5-2: hsl(344, 84%, 43%);\\n * --hue-6: hsl(35, 99%, 36%);\\n * --hue-6-2: hsl(35, 99%, 40%);\\n * --syntax-fg: hsl(230, 8%, 24%);\\n * --syntax-bg: hsl(230, 1%, 98%);\\n * --syntax-gutter: hsl(230, 1%, 62%);\\n * --syntax-guide: hsla(230, 8%, 24%, 0.2);\\n * --syntax-accent: hsl(230, 100%, 66%);\\n * From syntax-variables.less\\n * --syntax-selection-color: hsl(230, 1%, 90%);\\n * --syntax-gutter-background-color-selected: hsl(230, 1%, 90%);\\n * --syntax-cursor-line: hsla(230, 8%, 24%, 0.05);\\n * \\n * --syntax-gutter-border: 1px solid darkgray;\\n * --syntax-highlight-bg: hsl(210, 9%, 95%);\\n * --syntax-highlight-selected-bg: hsla(230, 8%, 79%, 0.5);\\n\\n *  --syntax-deleted-selected-bg: hsla(353, 95%, 66%, 0.25);\\n *  --syntax-deleted-bg: hsla(353, 95%, 66%, 0.25);\\n\\n *  --syntax-inserted-bg: hsla(137, 100%, 95%);\\n *  --syntax-inserted-selected-bg: hsla(135, 73%, 55%, 0.25)\\n */\\n\\n  :host {\\n    --mono-1: hsl(230, 8%, 24%);\\n    --mono-2: hsl(230, 6%, 44%);\\n    --mono-3: hsl(230, 4%, 64%);\\n    --hue-1: hsl(198, 99%, 37%);\\n    --hue-2: hsl(221, 87%, 60%);\\n    --hue-3: hsl(301, 63%, 40%);\\n    --hue-4: hsl(119, 34%, 47%);\\n    --hue-5: hsl(5, 74%, 59%);\\n    --hue-5-2: hsl(344, 84%, 43%);\\n    --hue-6: hsl(35, 99%, 36%);\\n    --hue-6-2: hsl(35, 99%, 40%);\\n    --syntax-fg: hsl(230, 8%, 24%);\\n    --syntax-bg: hsl(230, 1%, 98%);\\n    --syntax-gutter: hsl(230, 1%, 62%);\\n    --syntax-guide: hsla(230, 8%, 24%, 0.2);\\n    --syntax-accent: hsl(230, 100%, 66%);\\n    /** From syntax-variables.less */\\n    --syntax-selection-color: hsl(230, 1%, 90%);\\n    --syntax-gutter-background-color-selected: hsl(230, 1%, 90%);\\n    --syntax-cursor-line: hsla(230, 8%, 24%, 0.05);\\n\\n    /* --- additional tokens --> */\\n    --syntax-gutter-border: 1px solid darkgray;\\n\\n    --syntax-highlight-bg: hsl(210, 9%, 95%);\\n    --syntax-highlight-selected-bg: hsla(230, 8%, 79%, 0.5);\\n\\n    --syntax-deleted-bg: hsla(353, 95%, 86%, 0.25);\\n    --syntax-deleted-selected-bg: hsla(353, 95%, 66%, 0.25);\\n\\n    --syntax-inserted-bg: hsla(137, 100%, 95%);\\n    --syntax-inserted-selected-bg: hsla(135, 73%, 55%, 0.25);\\n  }\\n\\n  code[class*=\\\"language-\\\"],\\n  pre[class*=\\\"language-\\\"] {\\n    background: var(--syntax-bg);\\n    color: var(--syntax-fg);\\n    direction: inherit;\\n    text-align: start;\\n    -webkit-hyphens: none;\\n    -moz-hyphens: none;\\n    -ms-hyphens: none;\\n    hyphens: none;\\n  }\\n\\n  /* Selection */\\n  code[class*=\\\"language-\\\"]::-moz-selection,\\n  code[class*=\\\"language-\\\"] *::-moz-selection,\\n  pre[class*=\\\"language-\\\"] *::-moz-selection {\\n    background: var(--syntax-selection-color);\\n    color: inherit;\\n  }\\n\\n  code[class*=\\\"language-\\\"]::selection,\\n  code[class*=\\\"language-\\\"] *::selection,\\n  pre[class*=\\\"language-\\\"] *::selection {\\n    background: var(--syntax-selection-color);\\n    color: inherit;\\n  }\\n\\n  .token.comment,\\n  .token.prolog,\\n  .token.cdata {\\n    color: var(--mono-3);\\n  }\\n\\n  .token.doctype,\\n  .token.punctuation,\\n  .token.entity {\\n    color: var(--mono-1);\\n  }\\n\\n  .token.attr-name,\\n  .token.class-name,\\n  .token.boolean,\\n  .token.constant,\\n  .token.number,\\n  .token.atrule {\\n    color: var(--hue-6);\\n  }\\n\\n  .token.keyword {\\n    color: var(--hue-3);\\n  }\\n\\n  .token.property,\\n  .token.tag,\\n  .token.symbol,\\n  .token.deleted,\\n  .token.important {\\n    color: var(--hue-5);\\n  }\\n\\n  .token.selector,\\n  .token.string,\\n  .token.char,\\n  .token.builtin,\\n  .token.inserted,\\n  .token.regex,\\n  .token.attr-value,\\n  .token.attr-value > .token.punctuation {\\n    color: var(--hue-4);\\n  }\\n\\n  .token.variable,\\n  .token.operator,\\n  .token.function {\\n    color: var(--hue-2);\\n  }\\n\\n  .token.url {\\n    color: var(--hue-1);\\n  }\\n\\n  /* HTML overrides */\\n  .token.attr-value > .token.punctuation.attr-equals,\\n  .token.special-attr > .token.attr-value > .token.value.css {\\n    color: var(--mono-1);\\n  }\\n\\n  /* CSS overrides */\\n  .language-css .token.selector {\\n    color: var(--hue-5);\\n  }\\n\\n  .language-css .token.property {\\n    color: var(--mono-1);\\n  }\\n\\n  .language-css .token.function,\\n  .language-css .token.url > .token.function {\\n    color: var(--hue-1);\\n  }\\n\\n  .language-css .token.url > .token.string.url {\\n    color: var(--hue-4);\\n  }\\n\\n  .language-css .token.important,\\n  .language-css .token.atrule .token.rule {\\n    color: var(--hue-3);\\n  }\\n\\n  /* JS overrides */\\n  .language-javascript .token.operator {\\n    color: var(--hue-3);\\n  }\\n\\n  .language-javascript\\n    .token.template-string\\n    > .token.interpolation\\n    > .token.interpolation-punctuation.punctuation {\\n    color: var(--hue-5-2);\\n  }\\n\\n  /* JSON overrides */\\n  .language-json .token.operator {\\n    color: var(--mono-1);\\n  }\\n\\n  .language-json .token.null.keyword {\\n    color: var(--hue-6);\\n  }\\n\\n  /* MD overrides */\\n  .language-markdown .token.url,\\n  .language-markdown .token.url > .token.operator,\\n  .language-markdown .token.url-reference.url > .token.string {\\n    color: var(--mono-1);\\n  }\\n\\n  .language-markdown .token.url > .token.content {\\n    color: var(--hue-2);\\n  }\\n\\n  .language-markdown .token.url > .token.url,\\n  .language-markdown .token.url-reference.url {\\n    color: var(--hue-1);\\n  }\\n\\n  .language-markdown .token.blockquote.punctuation,\\n  .language-markdown .token.hr.punctuation {\\n    color: var(--mono-3);\\n    font-style: italic;\\n  }\\n\\n  .language-markdown .token.code-snippet {\\n    color: var(--hue-4);\\n  }\\n\\n  .language-markdown .token.bold .token.content {\\n    color: var(--hue-6);\\n  }\\n\\n  .language-markdown .token.italic .token.content {\\n    color: var(--hue-3);\\n  }\\n\\n  .language-markdown .token.strike .token.content,\\n  .language-markdown .token.strike .token.punctuation,\\n  .language-markdown .token.list.punctuation,\\n  .language-markdown .token.title.important > .token.punctuation {\\n    color: var(--hue-5);\\n  }\\n\\n  /* General */\\n  .token.bold {\\n    font-weight: bold;\\n  }\\n\\n  .token.comment,\\n  .token.italic {\\n    font-style: italic;\\n  }\\n\\n  .token.entity {\\n    cursor: help;\\n  }\\n\\n  .token.namespace {\\n    opacity: 0.8;\\n  }\\n\\n  /* Plugin overrides */\\n  /* Selectors should have higher specificity than those in the plugins' default stylesheets */\\n\\n  /* Show Invisibles plugin overrides */\\n  .token.token.tab:not(:empty):before,\\n  .token.token.cr:before,\\n  .token.token.lf:before,\\n  .token.token.space:before {\\n    color: var(--syntax-guide);\\n  }\\n\\n  /* Toolbar plugin overrides */\\n  /* Space out all buttons and move them away from the right edge of the code block */\\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item {\\n    margin-right: 0.4em;\\n  }\\n\\n  /* Styling the buttons */\\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item > button,\\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item > a,\\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item > span {\\n    background: var(--syntax-selection-color);\\n    color: var(--mono-2);\\n    padding: 0.1em 0.4em;\\n    border-radius: 0.3em;\\n  }\\n\\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item > button:hover,\\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item > button:focus,\\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item > a:hover,\\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item > a:focus,\\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item > span:hover,\\n  div.code-toolbar > .toolbar.toolbar > .toolbar-item > span:focus {\\n    background: hsl(230, 1%, 78%); /* custom: darken(--syntax-bg, 20%) */\\n    color: var(--mono-1);\\n  }\\n\\n  /* Line Highlight plugin overrides */\\n  /* The highlighted line itself */\\n  .line-highlight.line-highlight {\\n    background: var(--syntax-highlight-bg);\\n  }\\n\\n  /* Selection on highlighted lines */\\n  pre.diff-highlight\\n    > code\\n    .token.token.line-highlight:not(.prefix)::-moz-selection,\\n  pre.diff-highlight\\n    > code\\n    .token.token.line-highlight:not(.prefix)\\n    *::-moz-selection,\\n  pre\\n    > code.diff-highlight\\n    .token.token.line-highlight:not(.prefix)::-moz-selection,\\n  pre\\n    > code.diff-highlight\\n    .token.token.line-highlight:not(.prefix)\\n    *::-moz-selection {\\n    background-color: var(--syntax-highlight-selected-bg);\\n  }\\n\\n  /* Selection on highlighted lines */\\n  pre.diff-highlight > code .token.token.line-highlight:not(.prefix)::selection,\\n  pre.diff-highlight\\n    > code\\n    .token.token.line-highlight:not(.prefix)\\n    *::selection,\\n  pre > code.diff-highlight .token.token.line-highlight:not(.prefix)::selection,\\n  pre\\n    > code.diff-highlight\\n    .token.token.line-highlight:not(.prefix)\\n    *::selection {\\n    background-color: var(--syntax-highlight-selected-bg);\\n  }\\n\\n  /* Hovering over a linkable line number (in the gutter area) */\\n  /* Requires Line Numbers plugin as well */\\n  pre[id].linkable-line-numbers.linkable-line-numbers\\n    span.line-numbers-rows\\n    > span:hover:before {\\n    background-color: var(--syntax-cursor-line);\\n  }\\n\\n  /* Line Numbers and Command Line plugins overrides */\\n  /* Line separating gutter from coding area */\\n  .line-numbers.line-numbers .line-numbers-rows,\\n  .command-line .command-line-prompt {\\n    border-right-color: var(--syntax-guide);\\n  }\\n\\n  /* Stuff in the gutter */\\n  .line-numbers .line-numbers-rows > span:before,\\n  .command-line .command-line-prompt > span:before {\\n    color: var(--syntax-gutter);\\n  }\\n\\n  /* Match Braces plugin overrides */\\n  /* Note: Outline colour is inherited from the braces */\\n  .rainbow-braces .token.token.punctuation.brace-level-1,\\n  .rainbow-braces .token.token.punctuation.brace-level-5,\\n  .rainbow-braces .token.token.punctuation.brace-level-9 {\\n    color: var(--hue-5);\\n  }\\n\\n  .rainbow-braces .token.token.punctuation.brace-level-2,\\n  .rainbow-braces .token.token.punctuation.brace-level-6,\\n  .rainbow-braces .token.token.punctuation.brace-level-10 {\\n    color: var(--hue-4);\\n  }\\n\\n  .rainbow-braces .token.token.punctuation.brace-level-3,\\n  .rainbow-braces .token.token.punctuation.brace-level-7,\\n  .rainbow-braces .token.token.punctuation.brace-level-11 {\\n    color: var(--hue-2);\\n  }\\n\\n  .rainbow-braces .token.token.punctuation.brace-level-4,\\n  .rainbow-braces .token.token.punctuation.brace-level-8,\\n  .rainbow-braces .token.token.punctuation.brace-level-12 {\\n    color: var(--hue-3);\\n  }\\n\\n  /* Diff Highlight plugin overrides */\\n  /* Taken from https://github.com/atom/github/blob/master/styles/variables.less */\\n  pre.diff-highlight > code .token.token.deleted:not(.prefix),\\n  pre > code.diff-highlight .token.token.deleted:not(.prefix) {\\n    background-color: var(--syntax-deleted-bg);\\n  }\\n\\n  pre.diff-highlight > code .token.token.deleted:not(.prefix)::-moz-selection,\\n  pre.diff-highlight > code .token.token.deleted:not(.prefix) *::-moz-selection,\\n  pre > code.diff-highlight .token.token.deleted:not(.prefix)::-moz-selection,\\n  pre\\n    > code.diff-highlight\\n    .token.token.deleted:not(.prefix)\\n    *::-moz-selection {\\n    background-color: var(--syntax-deleted-selected-bg);\\n  }\\n\\n  pre.diff-highlight > code .token.token.deleted:not(.prefix)::selection,\\n  pre.diff-highlight > code .token.token.deleted:not(.prefix) *::selection,\\n  pre > code.diff-highlight .token.token.deleted:not(.prefix)::selection,\\n  pre > code.diff-highlight .token.token.deleted:not(.prefix) *::selection {\\n    background-color: var(--syntax-deleted-selected-bg);\\n  }\\n\\n  pre.diff-highlight > code .token.token.inserted:not(.prefix),\\n  pre > code.diff-highlight .token.token.inserted:not(.prefix) {\\n    background-color: var(--syntax-inserted-bg);\\n  }\\n\\n  pre.diff-highlight > code .token.token.inserted:not(.prefix)::-moz-selection,\\n  pre.diff-highlight\\n    > code\\n    .token.token.inserted:not(.prefix)\\n    *::-moz-selection,\\n  pre > code.diff-highlight .token.token.inserted:not(.prefix)::-moz-selection,\\n  pre\\n    > code.diff-highlight\\n    .token.token.inserted:not(.prefix)\\n    *::-moz-selection {\\n    background-color: var(--syntax-inserted-selected-bg);\\n  }\\n\\n  pre.diff-highlight > code .token.token.inserted:not(.prefix)::selection,\\n  pre.diff-highlight > code .token.token.inserted:not(.prefix) *::selection,\\n  pre > code.diff-highlight .token.token.inserted:not(.prefix)::selection,\\n  pre > code.diff-highlight .token.token.inserted:not(.prefix) *::selection {\\n    background-color: var(--syntax-inserted-selected-bg);\\n  }\\n\\n  /* Previewers plugin overrides */\\n  /* Based on https://github.com/atom-community/atom-ide-datatip/blob/master/styles/atom-ide-datatips.less and https://github.com/atom/atom/blob/master/packages/one-light-ui */\\n  /* Border around popup */\\n  .prism-previewer.prism-previewer:before,\\n  .prism-previewer-gradient.prism-previewer-gradient div {\\n    border-color: hsl(0, 0, 95%);\\n  }\\n\\n  /* Angle and time should remain as circles and are hence not included */\\n  .prism-previewer-color.prism-previewer-color:before,\\n  .prism-previewer-gradient.prism-previewer-gradient div,\\n  .prism-previewer-easing.prism-previewer-easing:before {\\n    border-radius: 0.3em;\\n  }\\n\\n  /* Triangles pointing to the code */\\n  .prism-previewer.prism-previewer:after {\\n    border-top-color: hsl(0, 0, 95%);\\n  }\\n\\n  .prism-previewer-flipped.prism-previewer-flipped.after {\\n    border-bottom-color: hsl(0, 0, 95%);\\n  }\\n\\n  /* Background colour within the popup */\\n  .prism-previewer-angle.prism-previewer-angle:before,\\n  .prism-previewer-time.prism-previewer-time:before,\\n  .prism-previewer-easing.prism-previewer-easing {\\n    background: hsl(0, 0%, 100%);\\n  }\\n\\n  /* For angle, this is the positive area (eg. 90deg will display one quadrant in this colour) */\\n  /* For time, this is the alternate colour */\\n  .prism-previewer-angle.prism-previewer-angle circle,\\n  .prism-previewer-time.prism-previewer-time circle {\\n    stroke: var(--mono-1);\\n    stroke-opacity: 1;\\n  }\\n\\n  /* Stroke colours of the handle, direction point, and vector itself */\\n  .prism-previewer-easing.prism-previewer-easing circle,\\n  .prism-previewer-easing.prism-previewer-easing path,\\n  .prism-previewer-easing.prism-previewer-easing line {\\n    stroke: var(--mono-1);\\n  }\\n\\n  /* Fill colour of the handle */\\n  .prism-previewer-easing.prism-previewer-easing circle {\\n    fill: transparent;\\n  }\\n`;\\n\",\"exports/utils/compute-line-info.d.ts\":\"export namespace DiffType {\\n    let DEFAULT: \\\"default\\\";\\n    let ADDED: \\\"added\\\";\\n    let REMOVED: \\\"removed\\\";\\n    let EMPTY: \\\"empty\\\";\\n}\\nexport namespace DiffMethod {\\n    let CHARS: \\\"diffChars\\\";\\n    let WORDS: \\\"diffWords\\\";\\n    let WORDS_WITH_SPACE: \\\"diffWordsWithSpace\\\";\\n    let LINES: \\\"diffLines\\\";\\n    let TRIMMED_LINES: \\\"diffTrimmedLines\\\";\\n    let SENTENCES: \\\"diffSentences\\\";\\n    let CSS: \\\"diffCss\\\";\\n}\\nexport type DiffTypeValues = (typeof DiffType)[keyof typeof DiffType];\\nexport type DiffInformation = {\\n    value?: string | DiffInformation[] | undefined;\\n    lineNumber?: number | undefined;\\n    type?: \\\"added\\\" | \\\"removed\\\" | \\\"default\\\" | \\\"empty\\\" | undefined;\\n    data?: import(\\\"../components/basic-diff-view-element/basic-diff-view-element.js\\\").LineDiffData[] | undefined;\\n};\\nexport type LineInformation = {\\n    left: DiffInformation;\\n    right: DiffInformation;\\n};\\nexport type ComputedLineInformation = {\\n    lineInformation: LineInformation[];\\n    diffLines: number[];\\n};\\nexport type ComputedDiffInformation = {\\n    left: DiffInformation[];\\n    right: DiffInformation[];\\n};\\nexport type JsDiffChangeObject = {\\n    added?: boolean | undefined;\\n    removed?: boolean | undefined;\\n    value?: string | undefined;\\n};\\n/**\\n * [TODO]: Think about moving common left and right value assignment to a\\n * common place. Better readability?\\n *\\n * Computes line wise information based in the js diff information passed. Each\\n * line contains information about left and right section. Left side denotes\\n * deletion and right side denotes addition.\\n *\\n * @param {string} oldString - Old string to compare.\\n * @param {string} newString - New string to compare with old string.\\n * @param {boolean} [disableWordDiff=false] - Flag to enable/disable word diff.\\n * @param {typeof DiffMethod[keyof typeof DiffMethod]} [compareMethod=\\\"diffChars\\\"] - JsDiff text diff method from https://github.com/kpdecker/jsdiff/tree/v4.0.1#api\\n * @param {number} [linesOffset=0] - line number to start counting from\\n * @returns {ComputedLineInformation}\\n */\\nexport function computeLineInformation(oldString: string, newString: string, disableWordDiff?: boolean | undefined, compareMethod?: \\\"diffChars\\\" | \\\"diffWords\\\" | \\\"diffWordsWithSpace\\\" | \\\"diffLines\\\" | \\\"diffTrimmedLines\\\" | \\\"diffSentences\\\" | \\\"diffCss\\\" | undefined, linesOffset?: number | undefined): ComputedLineInformation;\\n\",\"exports/utils/compute-line-info.js\":\"/**\\n * A lot of the below code was taken and modified from React Diff Viewer.\\n * \\n *\\n * MIT License\\n\\nCopyright (c) 2018 Pranesh Ravi\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n */\\nimport * as diff from \\\"diff\\\";\\n\\nexport const DiffType = /** @type {const} */ ({\\n  DEFAULT: \\\"default\\\",\\n  ADDED: \\\"added\\\",\\n  REMOVED: \\\"removed\\\",\\n  /** \\\"empty\\\" is not directly used here, but is used by the diff viewer to denote lines that dont exist. */\\n  EMPTY: \\\"empty\\\",\\n});\\n\\n/**\\n * @typedef {typeof DiffType[keyof typeof DiffType]} DiffTypeValues\\n */\\n\\n// See https://github.com/kpdecker/jsdiff/tree/v4.0.1#api for more info on the below JsDiff methods\\nexport const DiffMethod = /** @type {const} */ ({\\n  CHARS: \\\"diffChars\\\",\\n  WORDS: \\\"diffWords\\\",\\n  WORDS_WITH_SPACE: \\\"diffWordsWithSpace\\\",\\n  LINES: \\\"diffLines\\\",\\n  TRIMMED_LINES: \\\"diffTrimmedLines\\\",\\n  SENTENCES: \\\"diffSentences\\\",\\n  CSS: \\\"diffCss\\\",\\n});\\n\\n/**\\n * @typedef {object} DiffInformation\\n * @property {string | DiffInformation[]} [value]\\n * @property {number} [lineNumber]\\n * @property {typeof DiffType[keyof typeof DiffType]} [type]\\n * @property {import(\\\"../components/diff-view-element/diff-view-element.js\\\").LineDiffData[]} [data]\\n */\\n\\n/**\\n * @typedef {object} LineInformation\\n * @property {DiffInformation} left\\n * @property {DiffInformation} right\\n */\\n\\n/**\\n * @typedef {object} ComputedLineInformation\\n * @property {LineInformation[]} lineInformation\\n * @property {number[]} diffLines\\n */\\n\\n/**\\n * @typedef {object} ComputedDiffInformation\\n * @property {DiffInformation[]} left\\n * @property {DiffInformation[]} right\\n */\\n\\n// See https://github.com/kpdecker/jsdiff/tree/v4.0.1#change-objects for more info on JsDiff\\n// Change Objects\\n/**\\n * @typedef {object} JsDiffChangeObject\\n * @property {boolean} [added]\\n * @property {boolean} [removed]\\n * @property {string} [value]\\n */\\n\\n/**\\n * Splits diff text by new line and computes final list of diff lines based on\\n * conditions.\\n *\\n * @param {string} value - Diff text from the js diff module.\\n * @returns {string[]}\\n */\\nconst constructLines = (value) => {\\n  const lines = value.split(\\\"\\\\n\\\");\\n  const isAllEmpty = lines.every((val) => !val);\\n  if (isAllEmpty) {\\n    // This is to avoid added an extra new line in the UI.\\n    if (lines.length === 2) {\\n      return [];\\n    }\\n    lines.pop();\\n    return lines;\\n  }\\n\\n  const lastLine = lines[lines.length - 1];\\n  const firstLine = lines[0];\\n  // Remove the first and last element if they are new line character. This is\\n  // to avoid addition of extra new line in the UI.\\n\\n  if (!lastLine) {\\n    lines.pop();\\n  }\\n  if (!firstLine) {\\n    lines.shift();\\n  }\\n  return lines;\\n};\\n\\n/**\\n * Computes word diff information in the line.\\n * [TODO]: Consider adding options argument for JsDiff text block comparison\\n *\\n * @param {string} oldValue - Old word in the line.\\n * @param {string} newValue - New word in the line.\\n * @param {typeof DiffMethod[keyof typeof DiffMethod]} [compareMethod=\\\"diffChars\\\"] - JsDiff text diff method from https://github.com/kpdecker/jsdiff/tree/v4.0.1#api\\n * @returns {ComputedDiffInformation}\\n */\\nconst computeDiff = (oldValue, newValue, compareMethod = DiffMethod.CHARS) => {\\n  /**\\n   * @type {JsDiffChangeObject[]}\\n   */\\n  const diffArray = diff[compareMethod](oldValue, newValue);\\n\\n  /**\\n   * @type {ComputedDiffInformation}\\n   */\\n  const computedDiff = {\\n    left: [],\\n    right: [],\\n  };\\n  diffArray.forEach(\\n    /** @returns {DiffInformation} */\\n    ({ added, removed, value }) => {\\n      /** @type {DiffInformation} */\\n      const diffInformation = {};\\n      if (added) {\\n        diffInformation.type = DiffType.ADDED;\\n        diffInformation.value = value;\\n        computedDiff.right.push(diffInformation);\\n      }\\n      if (removed) {\\n        diffInformation.type = DiffType.REMOVED;\\n        diffInformation.value = value;\\n        computedDiff.left.push(diffInformation);\\n      }\\n      if (!removed && !added) {\\n        diffInformation.type = DiffType.DEFAULT;\\n        diffInformation.value = value;\\n        computedDiff.right.push(diffInformation);\\n        computedDiff.left.push(diffInformation);\\n      }\\n      return diffInformation;\\n    },\\n  );\\n\\n  return computedDiff;\\n};\\n\\n/**\\n * [TODO]: Think about moving common left and right value assignment to a\\n * common place. Better readability?\\n *\\n * Computes line wise information based in the js diff information passed. Each\\n * line contains information about left and right section. Left side denotes\\n * deletion and right side denotes addition.\\n *\\n * @param {string} oldString - Old string to compare.\\n * @param {string} newString - New string to compare with old string.\\n * @param {boolean} [disableWordDiff=false] - Flag to enable/disable word diff.\\n * @param {typeof DiffMethod[keyof typeof DiffMethod]} [compareMethod=\\\"diffChars\\\"] - JsDiff text diff method from https://github.com/kpdecker/jsdiff/tree/v4.0.1#api\\n * @param {number} [linesOffset=0] - line number to start counting from\\n * @returns {ComputedLineInformation}\\n */\\nconst computeLineInformation = (\\n  oldString,\\n  newString,\\n  disableWordDiff = false,\\n  compareMethod = DiffMethod.CHARS,\\n  linesOffset = 0,\\n) => {\\n  const diffArray = diff.diffLines(oldString, newString, {\\n    newlineIsToken: true,\\n    ignoreWhitespace: false,\\n    ignoreCase: false,\\n  });\\n  let rightLineNumber = linesOffset;\\n  let leftLineNumber = linesOffset;\\n\\n  /**\\n   * @type {LineInformation[]}\\n   */\\n  let lineInformation = [];\\n  let counter = 0;\\n\\n  /**\\n   * @type {number[]}\\n   */\\n  const diffLines = [];\\n\\n  /**\\n   * @type {string[]}\\n   */\\n  const ignoreDiffIndexes = [];\\n\\n  /**\\n   * @param {string} value\\n   * @param {number} diffIndex\\n   * @param {boolean} [added]\\n   * @param {boolean} [removed]\\n   * @param {boolean} [evaluateOnlyFirstLine]\\n   * @returns {LineInformation[]}\\n   */\\n  const getLineInformation = (\\n    value,\\n    diffIndex,\\n    added,\\n    removed,\\n    evaluateOnlyFirstLine,\\n  ) => {\\n    const lines = constructLines(value);\\n\\n    /**\\n     *  @type {{ right: DiffInformation, left: DiffInformation }[]}\\n     */\\n    const lineInfo = [];\\n    lines.forEach(\\n      /**\\n       * @param {string} line\\n       * @param {number} lineIndex\\n       */\\n      (line, lineIndex) => {\\n        /**\\n         * @type {DiffInformation}\\n         */\\n        const left = {};\\n\\n        /**\\n         * @type {DiffInformation}\\n         */\\n        const right = {};\\n        if (\\n          ignoreDiffIndexes.includes(`${diffIndex}-${lineIndex}`) ||\\n          (evaluateOnlyFirstLine && lineIndex !== 0)\\n        ) {\\n          return;\\n        }\\n        if (added || removed) {\\n          if (!diffLines.includes(counter)) {\\n            diffLines.push(counter);\\n          }\\n          if (removed) {\\n            leftLineNumber += 1;\\n            left.lineNumber = leftLineNumber;\\n            left.type = DiffType.REMOVED;\\n            left.value = line || \\\" \\\";\\n            // When the current line is of type REMOVED, check the next item in\\n            // the diff array whether it is of type ADDED. If true, the current\\n            // diff will be marked as both REMOVED and ADDED. Meaning, the\\n            // current line is a modification.\\n            const nextDiff = diffArray[diffIndex + 1];\\n            if (nextDiff && nextDiff.added) {\\n              const nextDiffLines = constructLines(nextDiff.value)[lineIndex];\\n              if (nextDiffLines) {\\n                const {\\n                  value: rightValue,\\n                  lineNumber,\\n                  type,\\n                } = getLineInformation(\\n                  nextDiff.value,\\n                  diffIndex,\\n                  true,\\n                  false,\\n                  true,\\n                )[0].right;\\n                // When identified as modification, push the next diff to ignore\\n                // list as the next value will be added in this line computation as\\n                // right and left values.\\n                ignoreDiffIndexes.push(`${diffIndex + 1}-${lineIndex}`);\\n                right.lineNumber = lineNumber;\\n                right.type = type;\\n                // Do word level diff and assign the corresponding values to the\\n                // left and right diff information object.\\n                if (disableWordDiff) {\\n                  right.value = rightValue;\\n                } else {\\n                  const computedDiff = computeDiff(\\n                    line,\\n                    /** @type {string} */ (rightValue),\\n                    compareMethod,\\n                  );\\n                  right.value = computedDiff.right;\\n                  left.value = computedDiff.left;\\n                }\\n              }\\n            }\\n          } else {\\n            rightLineNumber += 1;\\n            right.lineNumber = rightLineNumber;\\n            right.type = DiffType.ADDED;\\n            right.value = line;\\n          }\\n        } else {\\n          leftLineNumber += 1;\\n          rightLineNumber += 1;\\n\\n          left.lineNumber = leftLineNumber;\\n          left.type = DiffType.DEFAULT;\\n          left.value = line;\\n          right.lineNumber = rightLineNumber;\\n          right.type = DiffType.DEFAULT;\\n          right.value = line;\\n        }\\n\\n        counter += 1;\\n        lineInfo.push({ right, left });\\n      },\\n    );\\n\\n    return lineInfo;\\n  };\\n\\n  diffArray.forEach(\\n    (/** @type {import('diff').Change} */ { added, removed, value }, index) => {\\n      lineInformation = [\\n        ...lineInformation,\\n        ...getLineInformation(value, index, added, removed),\\n      ];\\n    },\\n  );\\n\\n  return {\\n    lineInformation,\\n    diffLines,\\n  };\\n};\\n\\nexport { computeLineInformation };\\n\",\"internal/base-element.d.ts\":\"declare const BaseElement_base: {\\n    new (...args: any[]): {\\n        accessKey: string;\\n        readonly accessKeyLabel: string;\\n        autocapitalize: string;\\n        dir: string;\\n        draggable: boolean;\\n        hidden: boolean;\\n        inert: boolean;\\n        innerText: string;\\n        lang: string;\\n        readonly offsetHeight: number;\\n        readonly offsetLeft: number;\\n        readonly offsetParent: Element | null;\\n        readonly offsetTop: number;\\n        readonly offsetWidth: number;\\n        outerText: string;\\n        spellcheck: boolean;\\n        title: string;\\n        translate: boolean;\\n        attachInternals(): ElementInternals;\\n        click(): void;\\n        addEventListener(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined): void;\\n        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions | undefined): void;\\n        removeEventListener(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions | undefined): void;\\n        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions | undefined): void;\\n        readonly attributes: NamedNodeMap;\\n        readonly classList: DOMTokenList;\\n        className: string;\\n        readonly clientHeight: number;\\n        readonly clientLeft: number;\\n        readonly clientTop: number;\\n        readonly clientWidth: number;\\n        id: string;\\n        readonly localName: string;\\n        readonly namespaceURI: string | null;\\n        onfullscreenchange: ((this: Element, ev: Event) => any) | null;\\n        onfullscreenerror: ((this: Element, ev: Event) => any) | null;\\n        outerHTML: string;\\n        readonly ownerDocument: Document;\\n        readonly part: DOMTokenList;\\n        readonly prefix: string | null;\\n        readonly scrollHeight: number;\\n        scrollLeft: number;\\n        scrollTop: number;\\n        readonly scrollWidth: number;\\n        readonly shadowRoot: ShadowRoot | null;\\n        slot: string;\\n        readonly tagName: string;\\n        attachShadow(init: ShadowRootInit): ShadowRoot;\\n        checkVisibility(options?: CheckVisibilityOptions | undefined): boolean;\\n        closest(selector: K_2): HTMLElementTagNameMap[K_2] | null;\\n        closest(selector: K_3): SVGElementTagNameMap[K_3] | null;\\n        closest(selector: K_4): MathMLElementTagNameMap[K_4] | null;\\n        closest(selectors: string): E | null;\\n        getAttribute(qualifiedName: string): string | null;\\n        getAttributeNS(namespace: string | null, localName: string): string | null;\\n        getAttributeNames(): string[];\\n        getAttributeNode(qualifiedName: string): Attr | null;\\n        getAttributeNodeNS(namespace: string | null, localName: string): Attr | null;\\n        getBoundingClientRect(): DOMRect;\\n        getClientRects(): DOMRectList;\\n        getElementsByClassName(classNames: string): HTMLCollectionOf;\\n        getElementsByTagName(qualifiedName: K_5): HTMLCollectionOf;\\n        getElementsByTagName(qualifiedName: K_6): HTMLCollectionOf;\\n        getElementsByTagName(qualifiedName: K_7): HTMLCollectionOf;\\n        getElementsByTagName(qualifiedName: K_8): HTMLCollectionOf;\\n        getElementsByTagName(qualifiedName: string): HTMLCollectionOf;\\n        getElementsByTagNameNS(namespaceURI: \\\"http://www.w3.org/1999/xhtml\\\", localName: string): HTMLCollectionOf;\\n        getElementsByTagNameNS(namespaceURI: \\\"http://www.w3.org/2000/svg\\\", localName: string): HTMLCollectionOf;\\n        getElementsByTagNameNS(namespaceURI: \\\"http://www.w3.org/1998/Math/MathML\\\", localName: string): HTMLCollectionOf;\\n        getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf;\\n        hasAttribute(qualifiedName: string): boolean;\\n        hasAttributeNS(namespace: string | null, localName: string): boolean;\\n        hasAttributes(): boolean;\\n        hasPointerCapture(pointerId: number): boolean;\\n        insertAdjacentElement(where: InsertPosition, element: Element): Element | null;\\n        insertAdjacentHTML(position: InsertPosition, text: string): void;\\n        insertAdjacentText(where: InsertPosition, data: string): void;\\n        matches(selectors: string): boolean;\\n        releasePointerCapture(pointerId: number): void;\\n        removeAttribute(qualifiedName: string): void;\\n        removeAttributeNS(namespace: string | null, localName: string): void;\\n        removeAttributeNode(attr: Attr): Attr;\\n        requestFullscreen(options?: FullscreenOptions | undefined): Promise;\\n        requestPointerLock(): void;\\n        scroll(options?: ScrollToOptions | undefined): void;\\n        scroll(x: number, y: number): void;\\n        scrollBy(options?: ScrollToOptions | undefined): void;\\n        scrollBy(x: number, y: number): void;\\n        scrollIntoView(arg?: boolean | ScrollIntoViewOptions | undefined): void;\\n        scrollTo(options?: ScrollToOptions | undefined): void;\\n        scrollTo(x: number, y: number): void;\\n        setAttribute(qualifiedName: string, value: string): void;\\n        setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;\\n        setAttributeNode(attr: Attr): Attr | null;\\n        setAttributeNodeNS(attr: Attr): Attr | null;\\n        setPointerCapture(pointerId: number): void;\\n        toggleAttribute(qualifiedName: string, force?: boolean | undefined): boolean;\\n        webkitMatchesSelector(selectors: string): boolean;\\n        readonly baseURI: string;\\n        readonly childNodes: NodeListOf;\\n        readonly firstChild: ChildNode | null;\\n        readonly isConnected: boolean;\\n        readonly lastChild: ChildNode | null;\\n        readonly nextSibling: ChildNode | null;\\n        readonly nodeName: string;\\n        readonly nodeType: number;\\n        nodeValue: string | null;\\n        readonly parentElement: HTMLElement | null;\\n        readonly parentNode: ParentNode | null;\\n        readonly previousSibling: ChildNode | null;\\n        textContent: string | null;\\n        appendChild(node: T_1): T_1;\\n        cloneNode(deep?: boolean | undefined): Node;\\n        compareDocumentPosition(other: Node): number;\\n        contains(other: Node | null): boolean;\\n        getRootNode(options?: GetRootNodeOptions | undefined): Node;\\n        hasChildNodes(): boolean;\\n        insertBefore(node: T_2, child: Node | null): T_2;\\n        isDefaultNamespace(namespace: string | null): boolean;\\n        isEqualNode(otherNode: Node | null): boolean;\\n        isSameNode(otherNode: Node | null): boolean;\\n        lookupNamespaceURI(prefix: string | null): string | null;\\n        lookupPrefix(namespace: string | null): string | null;\\n        normalize(): void;\\n        removeChild(child: T_3): T_3;\\n        replaceChild(node: Node, child: T_4): T_4;\\n        readonly ELEMENT_NODE: 1;\\n        readonly ATTRIBUTE_NODE: 2;\\n        readonly TEXT_NODE: 3;\\n        readonly CDATA_SECTION_NODE: 4;\\n        readonly ENTITY_REFERENCE_NODE: 5;\\n        readonly ENTITY_NODE: 6;\\n        readonly PROCESSING_INSTRUCTION_NODE: 7;\\n        readonly COMMENT_NODE: 8;\\n        readonly DOCUMENT_NODE: 9;\\n        readonly DOCUMENT_TYPE_NODE: 10;\\n        readonly DOCUMENT_FRAGMENT_NODE: 11;\\n        readonly NOTATION_NODE: 12;\\n        readonly DOCUMENT_POSITION_DISCONNECTED: 1;\\n        readonly DOCUMENT_POSITION_PRECEDING: 2;\\n        readonly DOCUMENT_POSITION_FOLLOWING: 4;\\n        readonly DOCUMENT_POSITION_CONTAINS: 8;\\n        readonly DOCUMENT_POSITION_CONTAINED_BY: 16;\\n        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32;\\n        dispatchEvent(event: Event): boolean;\\n        ariaAtomic: string | null;\\n        ariaAutoComplete: string | null;\\n        ariaBusy: string | null;\\n        ariaChecked: string | null;\\n        ariaColCount: string | null;\\n        ariaColIndex: string | null;\\n        ariaColSpan: string | null;\\n        ariaCurrent: string | null;\\n        ariaDisabled: string | null;\\n        ariaExpanded: string | null;\\n        ariaHasPopup: string | null;\\n        ariaHidden: string | null;\\n        ariaInvalid: string | null;\\n        ariaKeyShortcuts: string | null;\\n        ariaLabel: string | null;\\n        ariaLevel: string | null;\\n        ariaLive: string | null;\\n        ariaModal: string | null;\\n        ariaMultiLine: string | null;\\n        ariaMultiSelectable: string | null;\\n        ariaOrientation: string | null;\\n        ariaPlaceholder: string | null;\\n        ariaPosInSet: string | null;\\n        ariaPressed: string | null;\\n        ariaReadOnly: string | null;\\n        ariaRequired: string | null;\\n        ariaRoleDescription: string | null;\\n        ariaRowCount: string | null;\\n        ariaRowIndex: string | null;\\n        ariaRowSpan: string | null;\\n        ariaSelected: string | null;\\n        ariaSetSize: string | null;\\n        ariaSort: string | null;\\n        ariaValueMax: string | null;\\n        ariaValueMin: string | null;\\n        ariaValueNow: string | null;\\n        ariaValueText: string | null;\\n        role: string | null;\\n        animate(keyframes: PropertyIndexedKeyframes | Keyframe[] | null, options?: number | KeyframeAnimationOptions | undefined): Animation;\\n        getAnimations(options?: GetAnimationsOptions | undefined): Animation[];\\n        after(...nodes: (string | Node)[]): void;\\n        before(...nodes: (string | Node)[]): void;\\n        remove(): void;\\n        replaceWith(...nodes: (string | Node)[]): void;\\n        innerHTML: string;\\n        readonly nextElementSibling: Element | null;\\n        readonly previousElementSibling: Element | null;\\n        readonly childElementCount: number;\\n        readonly children: HTMLCollection;\\n        readonly firstElementChild: Element | null;\\n        readonly lastElementChild: Element | null;\\n        append(...nodes: (string | Node)[]): void;\\n        prepend(...nodes: (string | Node)[]): void;\\n        querySelector(selectors: K_9): HTMLElementTagNameMap[K_9] | null;\\n        querySelector(selectors: K_10): SVGElementTagNameMap[K_10] | null;\\n        querySelector(selectors: K_11): MathMLElementTagNameMap[K_11] | null;\\n        querySelector(selectors: K_12): HTMLElementDeprecatedTagNameMap[K_12] | null;\\n        querySelector(selectors: string): E_1 | null;\\n        querySelectorAll(selectors: K_13): NodeListOf;\\n        querySelectorAll(selectors: K_14): NodeListOf;\\n        querySelectorAll(selectors: K_15): NodeListOf;\\n        querySelectorAll(selectors: K_16): NodeListOf;\\n        querySelectorAll(selectors: string): NodeListOf;\\n        replaceChildren(...nodes: (string | Node)[]): void;\\n        readonly assignedSlot: HTMLSlotElement | null;\\n        readonly style: CSSStyleDeclaration;\\n        contentEditable: string;\\n        enterKeyHint: string;\\n        inputMode: string;\\n        readonly isContentEditable: boolean;\\n        onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;\\n        onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;\\n        onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;\\n        onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;\\n        onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;\\n        onauxclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\\n        onbeforeinput: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null;\\n        onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;\\n        oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\\n        onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        oncontextmenu: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\\n        oncopy: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;\\n        oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        oncut: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;\\n        ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\\n        ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;\\n        ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;\\n        ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;\\n        ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;\\n        ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;\\n        ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;\\n        ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;\\n        ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onerror: OnErrorEventHandler;\\n        onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;\\n        onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;\\n        ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\\n        oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;\\n        onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;\\n        onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;\\n        onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\\n        onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\\n        onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\\n        onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\\n        onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\\n        onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\\n        onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\\n        onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;\\n        onpaste: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;\\n        onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\\n        onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\\n        onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\\n        onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\\n        onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\\n        onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\\n        onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\\n        onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;\\n        onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null;\\n        onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;\\n        onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;\\n        onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;\\n        onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        ontoggle: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;\\n        ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;\\n        ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;\\n        ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;\\n        ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;\\n        ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;\\n        ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;\\n        ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;\\n        onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) | null;\\n        onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;\\n        autofocus: boolean;\\n        readonly dataset: DOMStringMap;\\n        nonce?: string | undefined;\\n        tabIndex: number;\\n        blur(): void;\\n        focus(options?: FocusOptions | undefined): void;\\n    };\\n    baseName: string;\\n    warnOnExistingElement: boolean;\\n    define(name?: null | undefined | string, ctor?: null | undefined | CustomElementConstructor, options?: ElementDefinitionOptions | undefined): void;\\n} & typeof LitElement;\\n/**\\n * @customElement\\n */\\nexport class BaseElement extends BaseElement_base {\\n    /**\\n     * @type {Record}\\n     */\\n    static dependencies: Record;\\n    static version: string;\\n    /**\\n     * Gets directionality of the element\\n     * @returns {\\\"ltr\\\" | \\\"rtl\\\"}\\n     */\\n    getTextDirection(): \\\"ltr\\\" | \\\"rtl\\\";\\n}\\nimport { LitElement } from \\\"lit\\\";\\nexport {};\\n\",\"internal/base-element.js\":\"import { LitElement } from \\\"lit\\\";\\nimport { DefineableMixin } from \\\"web-component-define\\\";\\nimport { version } from \\\"./version.js\\\";\\n\\n/**\\n * @customElement\\n */\\nexport class BaseElement extends DefineableMixin(LitElement) {\\n  /**\\n   * @type {Record}\\n   */\\n  static dependencies = {};\\n\\n  static version = version;\\n\\n  // /**\\n  //  * @param {string} [name=this.baseName] - Tag name\\n  //  * @param {CustomElementConstructor} [ctor=this] - Constructor to pass to define\\n  //  * @param {ElementDefinitionOptions} [additionalOptions]\\n  //  */\\n  // static define (name = this.baseName, ctor = this, additionalOptions) {\\n  //   if (customElements.get(name)) {\\n  //     return\\n  //   }\\n\\n  //   customElements.define(name, ctor, additionalOptions)\\n  // }\\n\\n  constructor() {\\n    super();\\n    Object.entries(\\n      /** @type {typeof BaseElement} */ (this.constructor).dependencies,\\n    ).forEach(([name, ctor]) => {\\n      ctor.define(name);\\n    });\\n  }\\n\\n  /**\\n   * Gets directionality of the element\\n   * @returns {\\\"ltr\\\" | \\\"rtl\\\"}\\n   */\\n  getTextDirection() {\\n    return this.matches(\\\":dir(rtl)\\\") ? \\\"rtl\\\" : \\\"ltr\\\";\\n  }\\n}\\n\",\"internal/base-event.d.ts\":\"export class BaseEvent extends Event {\\n}\\n\",\"internal/base-event.js\":\"export class BaseEvent extends Event {\\n  /**\\n   * @param {string} name\\n   * @param {EventInit} [options={}]\\n   */\\n  constructor(name, options = {}) {\\n    if (options.bubbles == null) options.bubbles = true;\\n    if (options.composed == null) options.composed = true;\\n    super(name, options);\\n  }\\n}\\n\",\"internal/dedent.d.ts\":\"/**\\n * @param {TemplateStringsArray|string} templateStrings\\n * @param {any[]} values\\n * @returns {string}\\n */\\nexport function dedent(templateStrings: TemplateStringsArray | string, ...values: any[]): string;\\n\",\"internal/dedent.js\":\"/**\\n * This may be wrong, but we assume a `\\\\t` is equivalent to 2 spaces.\\n */\\nconst TAB_LENGTH = 2;\\n\\nconst INDENT_REGEXP = new RegExp(`(\\\\t| {${TAB_LENGTH}})`);\\n\\n/**\\n * @param {TemplateStringsArray|string} templateStrings\\n * @param {any[]} values\\n * @returns {string}\\n */\\nexport function dedent(templateStrings, ...values) {\\n  let matches = [];\\n  let strings =\\n    typeof templateStrings === \\\"string\\\"\\n      ? [templateStrings]\\n      : templateStrings.slice();\\n\\n  let string = \\\"\\\";\\n\\n  function interpolate() {\\n    string = strings[0];\\n\\n    for (let i = 0; i  value.length - 1));\\n    let pattern = new RegExp(`\\\\n(\\\\t| ){${size}}`, \\\"g\\\");\\n\\n    for (let i = 0; i \\n    if (el instanceof HTMLTextAreaElement) {\\n      strings.push(el.value);\\n      continue;\\n    }\\n\\n    strings.push(el.innerHTML);\\n  }\\n\\n  return strings.join(\\\"\\\\n\\\");\\n}\\n\",\"internal/line-highlight-plugin.d.ts\":\"/**\\n * @typedef {object} WrapEnv\\n * @property {string} type\\n * @property {string} content\\n * @property {Array} classes\\n * @property {Record} attributes\\n * @property {string} language\\n */\\n/**\\n * @example\\n *   prism.hooks.add(\\\"wrap\\\", LineHighlightWrapPlugin)\\n */\\nexport function LineHighlightWrapPlugin(): (env: WrapEnv) => void;\\nexport type WrapEnv = {\\n    type: string;\\n    content: string;\\n    classes: Array;\\n    attributes: Record;\\n    language: string;\\n};\\n\",\"internal/line-highlight-plugin.js\":\"/**\\n * @typedef {object} WrapEnv\\n * @property {string} type\\n * @property {string} content\\n * @property {Array} classes\\n * @property {Record} attributes\\n * @property {string} language\\n */\\n\\n/**\\n * @example\\n *   prism.hooks.add(\\\"wrap\\\", LineHighlightWrapPlugin)\\n */\\nexport function LineHighlightWrapPlugin() {\\n  const partTypes = [\\\"inserted\\\", \\\"line-highlight\\\", \\\"deleted\\\"];\\n\\n  /**\\n   * @param {{ type: string, attributes: Record }} token\\n   * @param {string} tokenName - Name of token to find\\n   * @param {string} partName - Name of part to add\\n   */\\n  function addParts(token, tokenName, partName) {\\n    if (token.type.includes(tokenName)) {\\n      token.attributes[\\\"part\\\"] = partName;\\n\\n      partTypes.forEach((type) => {\\n        if (!token.type.includes(type)) return;\\n\\n        token.attributes[\\\"part\\\"] += ` ${partName}--${type}`;\\n      });\\n    }\\n  }\\n  /**\\n   * @param {WrapEnv} env\\n   */\\n  return function (env) {\\n    addParts(env, \\\"diff-line\\\", \\\"line\\\");\\n    addParts(env, \\\"line-number\\\", \\\"line-number\\\");\\n    addParts(env, \\\"gutter-cell\\\", \\\"gutter-cell\\\");\\n    addParts(env, \\\"diff-marker\\\", \\\"diff-marker\\\");\\n  };\\n}\\n\",\"internal/line-number-plugin.d.ts\":\"/**\\n * Options for the LineNumberPlugin. Currently nothing.\\n * @typedef {object} Options\\n * @property {number} [lineNumberStart=1] - Where to start counting from. Default is 1.\\n * @property {(ary: Array, index: number, tokens: Array) => void} [callback] - substitute your own callback for each line.\\n */\\n/**\\n * @param {Options} [options={}]\\n * @return {import('./prism-highlight.js').Hook}\\n */\\nexport function LineNumberPlugin(options?: Options | undefined): import(\\\"./prism-highlight.js\\\").Hook;\\n/**\\n * Options for the LineNumberPlugin. Currently nothing.\\n */\\nexport type Options = {\\n    /**\\n     * - Where to start counting from. Default is 1.\\n     */\\n    lineNumberStart?: number | undefined;\\n    /**\\n     * - substitute your own callback for each line.\\n     */\\n    callback?: ((ary: Array, index: number, tokens: Array) => void) | undefined;\\n};\\nimport { Token } from \\\"prism-esm\\\";\\n\",\"internal/line-number-plugin.js\":\"// @ts-check\\nimport { Token } from \\\"prism-esm\\\";\\n\\nconst newLineRegex = /\\\\r\\\\n|\\\\r|\\\\n/;\\n\\n/**\\n * Options for the LineNumberPlugin. Currently nothing.\\n * @typedef {object} Options\\n * @property {number} [lineNumberStart=1] - Where to start counting from. Default is 1.\\n * @property {(ary: Array, index: number, tokens: Array) => void} [callback] - substitute your own callback for each line.\\n */\\n\\n/**\\n * @param {Options} [options={}]\\n * @return {import('./prism-highlight.js').Hook}\\n */\\nexport function LineNumberPlugin(options = {}) {\\n  const lineNumberStart = options.lineNumberStart ?? 1;\\n\\n  let callback = options.callback;\\n\\n  if (typeof callback !== \\\"function\\\") {\\n    callback = (ary, index, tokens) => {\\n      if (ary.length  {\\n      callback(ary, index, tokens);\\n    });\\n\\n    env.tokens = tokens;\\n  };\\n}\\n\\n/**\\n * @param {Array | Token | string} content\\n * @return {Array}\\n */\\nfunction wrapContent(content) {\\n  return Array.isArray(content) ? content : [content];\\n}\\n\\n/**\\n * @param {Array} content\\n * @return {Array | string}\\n */\\nfunction unwrapContent(content) {\\n  if (content.length === 0) {\\n    return \\\"\\\";\\n  } else if (content.length === 1 && typeof content[0] === \\\"string\\\") {\\n    return content[0];\\n  }\\n\\n  return content;\\n}\\n\\n/**\\n * @param {Array} tokens\\n * @return {Array>}\\n */\\nfunction splitLinesRec(tokens) {\\n  /** @type {Array} */\\n  let currentLine = [];\\n  /** @type {Array>} */\\n  const lines = [currentLine];\\n\\n  for (let i = 0; i  0) {\\n          lines.push((currentLine = []));\\n        }\\n\\n        const token1 = split[j];\\n        if (token1) {\\n          currentLine.push(token1);\\n        }\\n      }\\n    } else {\\n      // @ts-expect-error\\n      const split = splitLinesRec(wrapContent(token.content));\\n\\n      if (split.length > 1) {\\n        for (let j = 0; j  0) {\\n            lines.push((currentLine = []));\\n          }\\n\\n          const line = split[j];\\n          if (line.length) {\\n            const token1 = new Token(\\n              token.type,\\n              unwrapContent(line),\\n              token.alias,\\n            );\\n            token1.length = line.reduce((l, t) => l + t.length, 0);\\n            currentLine.push(token1);\\n          }\\n        }\\n      } else {\\n        currentLine.push(token);\\n      }\\n    }\\n  }\\n\\n  return lines;\\n}\\n\",\"internal/number-range.d.ts\":\"/**\\n * Used for constructing and manipulating ranges.\\n * @example String Construction\\n *\\t\\tnew Range()\\n *\\t\\t\\t\\t\\t.parse(\\\"{1-4, 6, 7}\\\")\\n *\\t\\t\\t\\t\\t.includes(4) // => true\\n *\\n * @example Manual Construction\\n *    const range = new Range()\\n *      range.ranges.push([0, 5])\\n *      range.numbers.add(7)\\n *\\n */\\nexport class NumberRange {\\n    /**\\n     * @type {Array}\\n     */\\n    errors: Array;\\n    /**\\n     * Ranges is an array of tuples. [0] is min, [1] is max.\\n     * @type {Array}\\n     */\\n    ranges: Array;\\n    /**\\n     * Possible single numbers\\n     * @type {Set}\\n     */\\n    numbers: Set;\\n    reset: () => void;\\n    /**\\n     * Checks if the parsed range includes the value.\\n     * @param {number} num\\n     */\\n    includes(num: number): boolean;\\n    /**\\n     * Given a string like this: \\\"{1-3, 4, 5}\\\" create a Range. Also accepts an array of numbers or a Set of numbers.\\n     * @param {Set | Array | string} str\\n     */\\n    parse(str: Set | Array | string): this;\\n}\\n\",\"internal/number-range.js\":\"/**\\n * Used for constructing and manipulating ranges.\\n * @example String Construction\\n *\\t\\tnew Range()\\n *\\t\\t\\t\\t\\t.parse(\\\"{1-4, 6, 7}\\\")\\n *\\t\\t\\t\\t\\t.includes(4) // => true\\n *\\n * @example Manual Construction\\n *    const range = new Range()\\n *      range.ranges.push([0, 5])\\n *      range.numbers.add(7)\\n *\\n */\\nexport class NumberRange {\\n  constructor() {\\n    const reset = () => {\\n      /**\\n       * @type {Array}\\n       */\\n      this.errors = [];\\n\\n      /**\\n       * Ranges is an array of tuples. [0] is min, [1] is max.\\n       * @type {Array}\\n       */\\n      this.ranges = [];\\n\\n      /**\\n       * Possible single numbers\\n       * @type {Set}\\n       */\\n      this.numbers = new Set();\\n    };\\n    this.reset = reset;\\n\\n    this.reset();\\n  }\\n\\n  /**\\n   * Checks if the parsed range includes the value.\\n   * @param {number} num\\n   */\\n  includes(num) {\\n    if (this.numbers.has(num)) {\\n      return true;\\n    }\\n\\n    if (this.ranges.length == 0) {\\n      return false;\\n    }\\n\\n    for (const range of this.ranges) {\\n      const [min, max] = range;\\n\\n      if (num >= min && num  | Array | string} str\\n   */\\n  parse(str) {\\n    this.reset();\\n\\n    if (Array.isArray(str)) {\\n      str.forEach((num) => this.numbers.add(num));\\n      return this;\\n    }\\n\\n    if (str instanceof Set) {\\n      this.numbers = str;\\n      return this;\\n    }\\n\\n    if (!str.includes(\\\"{\\\")) {\\n      this.errors.push(new Error(\\\"Unable to parse range. No `{` found.\\\"));\\n      return this;\\n    }\\n\\n    if (!str.includes(\\\"}\\\")) {\\n      this.errors.push(new Error(\\\"Unable to parse range. No `}` found.\\\"));\\n      return this;\\n    }\\n\\n    str = str.split(/{/)[1];\\n\\n    if (!str) {\\n      this.errors.push(new Error(\\\"Invalid string provided for range.\\\"));\\n      return this;\\n    }\\n\\n    str = str.split(/}/)[0];\\n\\n    str.split(/,\\\\s*/).forEach((val) => {\\n      // Turn them all into tuples.\\n      const [minStr, maxStr] = val.split(/-/);\\n\\n      const min = Number(minStr);\\n      const max = Number(maxStr);\\n\\n      if (min == null || isNaN(min)) return;\\n\\n      // We were only given a line number.\\n      if (max == null || isNaN(max)) {\\n        this.numbers.add(min);\\n        return;\\n      }\\n\\n      this.ranges.push([min, max]);\\n    });\\n\\n    return this;\\n  }\\n}\\n\",\"internal/prism-highlight.d.ts\":\"/**\\n * @typedef {{ code: string, grammar: import(\\\"prism-esm\\\").Grammar, language: string } & { tokens: Array}} Env\\n * @typedef {import(\\\"prism-esm\\\").HookCallback} HookCallback\\n */\\n/**\\n * Custom hooks to run with our custom tokenizer.\\n * @typedef {Object} Hooks\\n * @property {Hook[]} [beforeTokenize]\\n * @property {Hook[]} [afterTokenize]\\n */\\n/**\\n * Custom hooks to run with our custom tokenizer.\\n * @typedef {(env: Env) => void} Hook\\n */\\nexport function createPrismInstance(): PrismJS;\\n/**\\n * @see https://github.com/PrismJS/prism/blob/59e5a3471377057de1f401ba38337aca27b80e03/prism.js#L660\\n * A forked function from PrismJS to make wrap the tokenizer with custom functionality.\\n * @param {string} text - The code to highlight\\n * @param {import(\\\"prism-esm\\\").Grammar} grammar - The grammar to use\\n * @param {string} language - The language to detect\\n * @param {typeof PrismSingleton[\\\"instance\\\"]} highlighter\\n * @param {Hooks} hooks\\n */\\nexport function PrismHighlight(text: string, grammar: import(\\\"prism-esm\\\").Grammar, language: string, highlighter: (typeof PrismSingleton)[\\\"instance\\\"], hooks?: Hooks): string;\\n/**\\n * @see https://github.com/PrismJS/prism/blob/59e5a3471377057de1f401ba38337aca27b80e03/prism.js#L660\\n * A forked function from PrismJS to make wrap the tokenizer with custom functionality.\\n * @param {string} text - The code to highlight\\n * @param {import(\\\"prism-esm\\\").Grammar} grammar - The grammar to use\\n * @param {string} language - The language to detect\\n * @param {typeof PrismSingleton[\\\"instance\\\"]} highlighter\\n * @param {Hooks} hooks\\n */\\nexport function PrismEnv(text: string, grammar: import(\\\"prism-esm\\\").Grammar, language: string, highlighter: (typeof PrismSingleton)[\\\"instance\\\"], hooks?: Hooks): Env;\\nexport type Env = {\\n    code: string;\\n    grammar: import(\\\"prism-esm\\\").Grammar;\\n    language: string;\\n} & {\\n    tokens: Array;\\n};\\nexport type HookCallback = import(\\\"prism-esm\\\").HookCallback;\\n/**\\n * Custom hooks to run with our custom tokenizer.\\n */\\nexport type Hooks = {\\n    beforeTokenize?: Hook[] | undefined;\\n    afterTokenize?: Hook[] | undefined;\\n};\\n/**\\n * Custom hooks to run with our custom tokenizer.\\n */\\nexport type Hook = (env: Env) => void;\\nimport { Prism as PrismJS } from \\\"prism-esm\\\";\\ndeclare class PrismSingleton {\\n    static get instance(): PrismJS;\\n}\\nimport { Token } from \\\"prism-esm\\\";\\nexport {};\\n\",\"internal/prism-highlight.js\":\"// A custom Prism highlight implementation specific for adding line numbers for the editor by\\n// modifying the tokenizer.\\n\\nimport { Prism as PrismJS, Token } from \\\"prism-esm\\\";\\n\\n// HTML\\n// import { loader as markdownLoader } from \\\"prism-esm/components/prism-markdown.js\\\"\\nimport { loader as markupLoader } from \\\"prism-esm/components/prism-markup.js\\\";\\nimport { loader as markupTemplatingLoader } from \\\"prism-esm/components/prism-markup-templating.js\\\";\\n\\n// CSS\\nimport { loader as cssLoader } from \\\"prism-esm/components/prism-css.js\\\";\\nimport { loader as cssExtrasLoader } from \\\"prism-esm/components/prism-css-extras.js\\\";\\n\\n// JS\\nimport { loader as javascriptLoader } from \\\"prism-esm/components/prism-javascript.js\\\";\\nimport { loader as javascriptExtrasLoader } from \\\"prism-esm/components/prism-js-extras.js\\\";\\nimport { loader as javascriptTemplatesLoader } from \\\"prism-esm/components/prism-js-templates.js\\\";\\n\\n// JSX\\nimport { loader as jsxLoader } from \\\"prism-esm/components/prism-jsx.js\\\";\\n\\n// TS\\nimport { loader as tsLoader } from \\\"prism-esm/components/prism-typescript.js\\\";\\n\\n// TSX\\nimport { loader as tsxLoader } from \\\"prism-esm/components/prism-tsx.js\\\";\\n\\n// Markdown\\nimport { loader as markdownLoader } from \\\"prism-esm/components/prism-markdown.js\\\";\\n\\n/**\\n * @typedef {{ code: string, grammar: import(\\\"prism-esm\\\").Grammar, language: string } & { tokens: Array}} Env\\n * @typedef {import(\\\"prism-esm\\\").HookCallback} HookCallback\\n */\\n\\n/**\\n * Custom hooks to run with our custom tokenizer.\\n * @typedef {Object} Hooks\\n * @property {Hook[]} [beforeTokenize]\\n * @property {Hook[]} [afterTokenize]\\n */\\n\\n/**\\n * Custom hooks to run with our custom tokenizer.\\n * @typedef {(env: Env) => void} Hook\\n */\\n\\nexport function createPrismInstance() {\\n  const prism = new PrismJS();\\n  markupLoader(prism); // https://github.com/KonnorRogers/prism-esm/blob/a3ef460f67b98840cf354377baaf0868c862e3c8/components/prism-markup.js#L188-L195\\n  markupTemplatingLoader(prism);\\n  cssLoader(prism);\\n  cssExtrasLoader(prism);\\n  javascriptLoader(prism);\\n  javascriptExtrasLoader(prism);\\n  javascriptTemplatesLoader(prism);\\n  jsxLoader(prism);\\n  tsLoader(prism);\\n  tsxLoader(prism);\\n  markdownLoader(prism);\\n  return prism;\\n}\\n\\nclass PrismSingleton {\\n  static get instance() {\\n    if (!this.__singleton__) {\\n      this.__singleton__ = createPrismInstance();\\n    }\\n\\n    return this.__singleton__;\\n  }\\n}\\n\\n/**\\n * @see https://github.com/PrismJS/prism/blob/59e5a3471377057de1f401ba38337aca27b80e03/prism.js#L660\\n * A forked function from PrismJS to make wrap the tokenizer with custom functionality.\\n * @param {string} text - The code to highlight\\n * @param {import(\\\"prism-esm\\\").Grammar} grammar - The grammar to use\\n * @param {string} language - The language to detect\\n * @param {typeof PrismSingleton[\\\"instance\\\"]} highlighter\\n * @param {Hooks} hooks\\n */\\nexport function PrismHighlight(\\n  text,\\n  grammar,\\n  language,\\n  highlighter,\\n  hooks = {},\\n) {\\n  const env = PrismEnv(text, grammar, language, highlighter, hooks);\\n  return Token.stringify(\\n    highlighter.util.encode(/** @type {Array} */ (env.tokens)),\\n    env.language,\\n    highlighter,\\n  );\\n}\\n\\n/**\\n * @see https://github.com/PrismJS/prism/blob/59e5a3471377057de1f401ba38337aca27b80e03/prism.js#L660\\n * A forked function from PrismJS to make wrap the tokenizer with custom functionality.\\n * @param {string} text - The code to highlight\\n * @param {import(\\\"prism-esm\\\").Grammar} grammar - The grammar to use\\n * @param {string} language - The language to detect\\n * @param {typeof PrismSingleton[\\\"instance\\\"]} highlighter\\n * @param {Hooks} hooks\\n */\\nexport function PrismEnv(text, grammar, language, highlighter, hooks = {}) {\\n  if (!highlighter) {\\n    highlighter = PrismSingleton.instance;\\n  }\\n\\n  if (!grammar) {\\n    grammar = highlighter.languages[\\\"markup\\\"];\\n  }\\n\\n  /**\\n   * @type {Env}\\n   */\\n  var env = {\\n    code: text,\\n    grammar: grammar,\\n    language: language,\\n    tokens: [],\\n  };\\n\\n  highlighter.hooks.run(\\\"before-tokenize\\\", env);\\n\\n  hooks.beforeTokenize?.forEach((hook) => {\\n    hook(env);\\n  });\\n\\n  if (!env.grammar) {\\n    throw new Error('The language \\\"' + env.language + '\\\" has no grammar.');\\n  }\\n\\n  // New tokenizer wrapping every new line\\n  env.tokens = /** @type {Array} */ (\\n    highlighter.tokenize(env.code, env.grammar)\\n  );\\n\\n  highlighter.hooks.run(\\\"after-tokenize\\\", env);\\n\\n  /** Make sure these run after the real after-tokenize for line number plugins. */\\n  hooks.afterTokenize?.forEach((hook) => {\\n    hook(env);\\n  });\\n\\n  return env;\\n}\\n\",\"internal/replace-functions.d.ts\":\"/**\\n * @param {string} s - The string to replace\\n * @param {number} start - The start index\\n * @param {number} end - The end index\\n * @param {string} substitute - the substituting string\\n */\\nexport function replaceRange(s: string, start: number, end: number, substitute: string): string;\\n/**\\n * @param {string} text\\n * @param {RegExp} regex\\n */\\nexport function replaceLast(text: string, regex: RegExp): string;\\n\",\"internal/replace-functions.js\":\"/**\\n * @param {string} s - The string to replace\\n * @param {number} start - The start index\\n * @param {number} end - The end index\\n * @param {string} substitute - the substituting string\\n */\\nexport function replaceRange(s, start, end, substitute) {\\n  return s.substring(0, start) + substitute + s.substring(end);\\n}\\n\\n/**\\n * @param {string} text\\n * @param {RegExp} regex\\n */\\nexport function replaceLast(text, regex) {\\n  const matches = [...text.matchAll(regex)];\\n\\n  const lastMatch = matches[matches.length - 1];\\n\\n  if (!lastMatch) return text;\\n  if (lastMatch.index == null) return text;\\n\\n  const { index } = lastMatch;\\n\\n  const start = index;\\n  const end = index + lastMatch[0].length;\\n  const substitution = \\\"\\\";\\n  return replaceRange(text, start, end, substitution);\\n}\\n\",\"internal/string-map.d.ts\":\"/**\\n * @param {Record} obj\\n * @param {string} [spacer=\\\" \\\"]\\n * @returns {string}\\n */\\nexport function stringMap(obj: Record, spacer?: string | undefined): string;\\n\",\"internal/string-map.js\":\"// @ts-check\\n/**\\n * @param {Record} obj\\n * @param {string} [spacer=\\\" \\\"]\\n * @returns {string}\\n */\\nexport function stringMap(obj, spacer = \\\" \\\") {\\n  let strings = [];\\n\\n  for (const [key, val] of Object.entries(obj)) {\\n    if (Boolean(val)) {\\n      strings.push(key);\\n    }\\n  }\\n\\n  return strings.join(spacer);\\n}\\n\",\"internal/version.d.ts\":\"export const version: \\\"1.0.2\\\";\\n\",\"internal/version.js\":\"// This file is auto-generated. Do not manually edit this.\\nexport const version = \\\"1.0.2\\\";\"}"
        },
        {
          "id": "diff-view-element-pull-4-bridgetown_quick_search-index.json",
          "title": "Index",
          "collection": {
            "label": "pages",
            "name": "Posts"
          },
          "categories": "",
          "tags": "",
          "url": "/diff-view-element/pull/4/bridgetown_quick_search/index.json",
          "content": "[\n  {%- assign looped = false %}\n  {%- assign documents = site.documents %}\n  {%- if site.content_engine == \"resource\" %}{% assign documents = site.resources %}{% endif %}\n  {%- for document in documents %}\n    {%- if document.title %}\n      {%- unless document.exclude_from_search or document.id == \"\" %}\n        {%- assign url = document.url %}\n        {%- if site.content_engine == \"resource\" %}{% assign url = document.relative_url %}{% endif %}\n        {%- if looped %},{% endif %}\n        {\n          \"id\": \"{{ url | slugify }}\",\n          \"title\": {{ document.title | jsonify }},\n          {%- if document.collection %}\n          \"collection\": {\n            \"label\": {{ document.collection.label | jsonify }},\n            \"name\": {{ document.collection.name | default: \"Posts\" | jsonify }}\n          },\n          {%- endif %}\n          \"categories\": {{ document.categories | join: \", \" | jsonify }},\n          \"tags\": {{ document.tags | join: \", \" | jsonify }},\n          \"url\": {{ url | jsonify }},\n          \"content\": {{ document.content | strip_html | replace_regex: \"[\\s/\\n]+\",\" \" | strip | jsonify }}\n        }\n        {%- assign looped = true %}\n      {%- endunless %}\n    {%- endif %}\n  {%- endfor %}\n  {%- for document in site.generated_pages %}\n    {%- if document.name contains \".md\" or document.name contains \".html\" %}\n      {%- if document.title %}\n        {%- unless document.exclude_from_search %}\n          {%- if looped %},{% endif %}\n          {\n            \"id\": \"{{ document.url | slugify }}\",\n            \"title\": {{ document.title | jsonify }},\n            \"categories\": {{ document.categories | join: \", \" | jsonify }},\n            \"tags\": {{ document.tags | join: \", \" | jsonify }},\n            \"url\": {{ document.url | jsonify }},\n            \"content\": {{ document.content | strip_html | replace_regex: \"[\\s/\\n]+\",\" \" | strip | jsonify }}\n          }\n        {%- endunless %}\n      {%- endif %}\n    {%- endif %}\n  {%- endfor %}\n]"
        },
        {
          "id": "",
          "title": "A kit for reading diffs",
          "collection": {
            "label": "data",
            "name": "Posts"
          },
          "categories": "",
          "tags": "",
          "url": "",
          "content": ""
        }
]
